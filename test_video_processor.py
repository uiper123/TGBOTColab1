import asyncio
import logging
from video_processor import VideoProcessor

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

async def test_video_processor():
    """–¢–µ—Å—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞ process_chunk_logic"""
    
    video_processor = VideoProcessor()
    
    test_video_path = "temp/chunk_0.mp4"
    clip_duration = 30
    config = {
        'title': '–¢–ï–°–¢',
        'subtitle': '–ö–ª–∏–ø'
    }
    
    print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï VideoProcessor.process_chunk_logic")
    print("=" * 50)
    
    try:
        import os
        if not os.path.exists(test_video_path):
            print(f"‚ùå –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {test_video_path}")
            return
        
        print(f"‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –Ω–∞–π–¥–µ–Ω: {test_video_path}")
        
        clips = await video_processor.process_chunk_logic(
            test_video_path,
            clip_duration,
            config,
            start_index=0
        )
        
        print(f"\n‚úÖ –¢–ï–°–¢ –ó–ê–í–ï–†–®–ï–ù!")
        print(f"   –°–æ–∑–¥–∞–Ω–æ –∫–ª–∏–ø–æ–≤: {len(clips)}")
        for i, clip_path in enumerate(clips):
            print(f"   –ö–ª–∏–ø {i+1}: {clip_path}")
            
    except Exception as e:
        print(f"‚ùå –û–®–ò–ë–ö–ê –¢–ï–°–¢–ê: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(test_video_processor())

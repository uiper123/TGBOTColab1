import os
import logging
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from dotenv import load_dotenv
from video_processor import VideoProcessor

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        self.token = os.getenv('TELEGRAM_BOT_TOKEN')
        self.video_processor = VideoProcessor()
        self.user_settings = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        self.waiting_for_cookies = set()  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –≤–≤–æ–¥–∞ cookies
        self.waiting_for_token = set()  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –æ–∂–∏–¥–∞—é—â–∏–µ –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞
        
    async def start(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        user_id = update.effective_user.id
        self.user_settings[user_id] = {
            'duration': 30,
            'title': '–§–†–ê–ì–ú–ï–ù–¢',
            'subtitle': '–ß–∞—Å—Ç—å'
        }  # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
        await update.message.reply_text(
            "üé¨ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –Ω–∞—Ä–µ–∑–∫–∏ –≤–∏–¥–µ–æ –Ω–∞ —à–æ—Ç—Å—ã.\n\n"
            "üìù –ö–æ–º–∞–Ω–¥—ã:\n"
            "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É\n"
            "/duration <—Å–µ–∫—É–Ω–¥—ã> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —à–æ—Ç—Å–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 —Å–µ–∫)\n"
            "/title <—Ç–µ–∫—Å—Ç> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '–§–†–ê–ì–ú–ï–ù–¢')\n"
            "/subtitle <—Ç–µ–∫—Å—Ç> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '–ß–∞—Å—Ç—å')\n"
            "/cookies - –û–±–Ω–æ–≤–∏—Ç—å cookies –¥–ª—è YouTube\n"
            "/token - –û–±–Ω–æ–≤–∏—Ç—å Google OAuth —Ç–æ–∫–µ–Ω\n"
            "/settings - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n"
            "/help - –ü–æ–º–æ—â—å\n\n"
            "üìπ –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ:\n"
            "‚Ä¢ –°—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ\n"
            "‚Ä¢ –í–∏–¥–µ–æ —Ñ–∞–π–ª\n\n"
            "–Ø –Ω–∞—Ä–µ–∂—É –µ–≥–æ –Ω–∞ —à–æ—Ç—Å—ã –∏ –∑–∞–≥—Ä—É–∂—É –Ω–∞ Google Drive!"
        )
    
    async def set_duration(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /duration –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —à–æ—Ç—Å–æ–≤"""
        user_id = update.effective_user.id
        
        if not context.args:
            current_duration = self.user_settings.get(user_id, {}).get('duration', 30)
            await update.message.reply_text(f"‚è± –¢–µ–∫—É—â–∞—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {current_duration} —Å–µ–∫—É–Ω–¥")
            return
            
        try:
            duration = int(context.args[0])
            if duration < 5 or duration > 300:
                await update.message.reply_text("‚ö†Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 5 –¥–æ 300 —Å–µ–∫—É–Ω–¥")
                return
                
            if user_id not in self.user_settings:
                self.user_settings[user_id] = {}
            self.user_settings[user_id]['duration'] = duration
            
            await update.message.reply_text(f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: {duration} —Å–µ–∫—É–Ω–¥")
            
        except ValueError:
            await update.message.reply_text("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥")
    
    async def set_title(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /title –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        user_id = update.effective_user.id
        
        if not context.args:
            current_title = self.user_settings.get(user_id, {}).get('title', '–§–†–ê–ì–ú–ï–ù–¢')
            await update.message.reply_text(f"üìù –¢–µ–∫—É—â–∏–π –∑–∞–≥–æ–ª–æ–≤–æ–∫: '{current_title}'")
            return
        
        title = ' '.join(context.args)
        if len(title) > 50:
            await update.message.reply_text("‚ö†Ô∏è –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if user_id not in self.user_settings:
            self.user_settings[user_id] = {
                'duration': 30,
                'title': '–§–†–ê–ì–ú–ï–ù–¢',
                'subtitle': '–ß–∞—Å—Ç—å'
            }
        
        self.user_settings[user_id]['title'] = title
        self.user_settings[user_id]['custom_title'] = True  # –§–ª–∞–≥ —á—Ç–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π
        
        await update.message.reply_text(f"‚úÖ –ó–∞–≥–æ–ª–æ–≤–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: '{title}'")
    
    async def set_subtitle(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /subtitle –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞"""
        user_id = update.effective_user.id
        
        if not context.args:
            current_subtitle = self.user_settings.get(user_id, {}).get('subtitle', '–ß–∞—Å—Ç—å')
            await update.message.reply_text(f"üìù –¢–µ–∫—É—â–∏–π –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫: '{current_subtitle}'")
            return
        
        subtitle = ' '.join(context.args)
        if len(subtitle) > 50:
            await update.message.reply_text("‚ö†Ô∏è –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª–æ–≤)")
            return
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        if user_id not in self.user_settings:
            self.user_settings[user_id] = {
                'duration': 30,
                'title': '–§–†–ê–ì–ú–ï–ù–¢',
                'subtitle': '–ß–∞—Å—Ç—å'
            }
        
        self.user_settings[user_id]['subtitle'] = subtitle
        self.user_settings[user_id]['custom_subtitle'] = True  # –§–ª–∞–≥ —á—Ç–æ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π
        
        await update.message.reply_text(f"‚úÖ –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: '{subtitle}'")
    
    async def show_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /settings –¥–ª—è –ø–æ–∫–∞–∑–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        user_id = update.effective_user.id
        settings = self.user_settings.get(user_id, {
            'duration': 30,
            'title': '–§–†–ê–ì–ú–ï–ù–¢',
            'subtitle': '–ß–∞—Å—Ç—å'
        })
        
        await update.message.reply_text(
            f"‚öôÔ∏è –¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {settings.get('duration', 30)} —Å–µ–∫—É–Ω–¥\n"
            f"üìù –ó–∞–≥–æ–ª–æ–≤–æ–∫: '{settings.get('title', '–§–†–ê–ì–ú–ï–ù–¢')}'\n"
            f"üìù –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫: '{settings.get('subtitle', '–ß–∞—Å—Ç—å')}'\n\n"
            f"–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            f"/duration <—Å–µ–∫—É–Ω–¥—ã>\n"
            f"/title <—Ç–µ–∫—Å—Ç>\n"
            f"/subtitle <—Ç–µ–∫—Å—Ç>"
        )
    
    async def set_cookies(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /cookies –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è cookies —Ñ–∞–π–ª–∞"""
        user_id = update.effective_user.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö cookies
        self.waiting_for_cookies.add(user_id)
        
        await update.message.reply_text(
            "üç™ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ cookies –¥–ª—è YouTube\n\n"
            "üìã –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ cookies —Ñ–∞–π–ª–∞ —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
            "üí° –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å cookies:\n"
            "1. –û—Ç–∫—Ä–æ–π—Ç–µ YouTube –≤ –±—Ä–∞—É–∑–µ—Ä–µ\n"
            "2. –í–æ–π–¥–∏—Ç–µ –≤ –∞–∫–∫–∞—É–Ω—Ç\n"
            "3. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ cookies\n"
            "4. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ\n\n"
            "‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ cookies —Ç–µ–∫—Å—Ç–æ–º –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏"
        )
    
    async def set_token(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /token –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Google OAuth —Ç–æ–∫–µ–Ω–∞"""
        user_id = update.effective_user.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö —Ç–æ–∫–µ–Ω
        self.waiting_for_token.add(user_id)
        
        await update.message.reply_text(
            "üîë –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Google OAuth —Ç–æ–∫–µ–Ω–∞\n\n"
            "üìã –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π GOOGLE_OAUTH_TOKEN_BASE64 —Å–ª–µ–¥—É—é—â–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º.\n\n"
            "üí° –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω:\n"
            "1. –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω –∏–∑ Google Cloud Console\n"
            "2. –ó–∞–∫–æ–¥–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ base64\n"
            "3. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –ø–æ–ª–Ω—É—é —Å—Ç—Ä–æ–∫—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ\n\n"
            "‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω —Ç–µ–∫—Å—Ç–æ–º –≤ —Å–ª–µ–¥—É—é—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏–∏\n"
            "üîí –¢–æ–∫–µ–Ω –±—É–¥–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ .env —Ñ–∞–π–ª"
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        await update.message.reply_text(
            "üé¨ –ë–æ—Ç –¥–ª—è –Ω–∞—Ä–µ–∑–∫–∏ –≤–∏–¥–µ–æ –Ω–∞ —à–æ—Ç—Å—ã\n\n"
            "üìù –ö–æ–º–∞–Ω–¥—ã:\n"
            "/duration <—Å–µ–∫—É–Ω–¥—ã> - –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —à–æ—Ç—Å–æ–≤ (5-300 —Å–µ–∫)\n"
            "/title <—Ç–µ–∫—Å—Ç> - –ó–∞–≥–æ–ª–æ–≤–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–≠–ü–ò–ó–û–î')\n"
            "/subtitle <—Ç–µ–∫—Å—Ç> - –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '–°–µ—Ä–∏—è')\n"
            "/cookies - –û–±–Ω–æ–≤–∏—Ç—å cookies –¥–ª—è YouTube\n"
            "/token - –û–±–Ω–æ–≤–∏—Ç—å Google OAuth —Ç–æ–∫–µ–Ω\n"
            "/settings - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏\n\n"
            "üìπ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
            "1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–æ–º–∞–Ω–¥–∞–º–∏ –≤—ã—à–µ\n"
            "2. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª\n"
            "3. –î–æ–∂–¥–∏—Ç–µ—Å—å –æ–±—Ä–∞–±–æ—Ç–∫–∏\n"
            "4. –ü–æ–ª—É—á–∏—Ç–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –≥–æ—Ç–æ–≤—ã–µ —à–æ—Ç—Å—ã\n\n"
            "‚öôÔ∏è –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:\n"
            "‚Ä¢ –°—É–±—Ç–∏—Ç—Ä—ã –ø–æ –æ–¥–Ω–æ–º—É —Å–ª–æ–≤—É —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π\n"
            "‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏\n"
            "‚Ä¢ –í—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–∏–¥–µ–æ\n"
            "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –Ω–∞ Google Drive\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –±–æ–ª—å—à–∏—Ö –≤–∏–¥–µ–æ (–Ω–∞—Ä–µ–∑–∫–∞ –Ω–∞ —á–∞–Ω–∫–∏)\n\n"
            "üí° –ü—Ä–∏–º–µ—Ä—ã –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤:\n"
            "/title –£–†–û–ö ‚Üí '–£–†–û–ö 1', '–£–†–û–ö 2'...\n"
            "/subtitle –ì–ª–∞–≤–∞ ‚Üí '–ì–ª–∞–≤–∞ 1', '–ì–ª–∞–≤–∞ 2'..."
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_id = update.effective_user.id
        message = update.message
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∞ cookies
        if user_id in self.waiting_for_cookies:
            await self.process_cookies_input(update, message.text)
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∞ —Ç–æ–∫–µ–Ω–∞
        if user_id in self.waiting_for_token:
            await self.process_token_input(update, message.text)
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_config = self.user_settings.get(user_id, {
            'duration': 30,
            'title': '–§–†–ê–ì–ú–ï–ù–¢',
            'subtitle': '–ß–∞—Å—Ç—å'
        })
        
        if message.text and ('youtube.com' in message.text or 'youtu.be' in message.text):
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ YouTube —Å—Å—ã–ª–∫–∏
            await self.process_youtube_url(update, message.text, user_config)
            
        elif message.video:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞
            await self.process_video_file(update, message.video, user_config)
            
        else:
            await update.message.reply_text(
                "‚ö†Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ YouTube –≤–∏–¥–µ–æ –∏–ª–∏ –≤–∏–¥–µ–æ —Ñ–∞–π–ª"
            )
    
    async def process_cookies_input(self, update: Update, cookies_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ cookies"""
        user_id = update.effective_user.id
        
        try:
            if not cookies_text or len(cookies_text.strip()) < 10:
                await update.message.reply_text(
                    "‚ö†Ô∏è Cookies —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–µ. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ cookies —Ñ–∞–π–ª–∞."
                )
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º cookies –≤ —Ñ–∞–π–ª
            with open('cookies.txt', 'w', encoding='utf-8') as f:
                f.write(cookies_text.strip())
            
            # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö
            self.waiting_for_cookies.discard(user_id)
            
            await update.message.reply_text(
                "‚úÖ Cookies —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!\n\n"
                "üé¨ –¢–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Å—ã–ª–∫–∏ –Ω–∞ YouTube –≤–∏–¥–µ–æ.\n"
                "–ë–æ—Ç –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ cookies –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è."
            )
            
            logger.info(f"Cookies –æ–±–Ω–æ–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cookies: {e}")
            self.waiting_for_cookies.discard(user_id)
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è cookies. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∫–æ–º–∞–Ω–¥–æ–π /cookies"
            )
    
    async def process_token_input(self, update: Update, token_text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ Google OAuth —Ç–æ–∫–µ–Ω–∞"""
        user_id = update.effective_user.id
        
        try:
            if not token_text or len(token_text.strip()) < 50:
                await update.message.reply_text(
                    "‚ö†Ô∏è –¢–æ–∫–µ–Ω —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ–ª–Ω—ã–π GOOGLE_OAUTH_TOKEN_BASE64."
                )
                return
            
            token = token_text.strip()
            
            # –ß–∏—Ç–∞–µ–º —Ç–µ–∫—É—â–∏–π .env —Ñ–∞–π–ª
            env_lines = []
            env_file_path = '.env'
            
            if os.path.exists(env_file_path):
                with open(env_file_path, 'r', encoding='utf-8') as f:
                    env_lines = f.readlines()
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–ª–∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω
            token_updated = False
            for i, line in enumerate(env_lines):
                if line.startswith('GOOGLE_OAUTH_TOKEN_BASE64='):
                    env_lines[i] = f'GOOGLE_OAUTH_TOKEN_BASE64={token}\n'
                    token_updated = True
                    break
            
            # –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
            if not token_updated:
                env_lines.append(f'GOOGLE_OAUTH_TOKEN_BASE64={token}\n')
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π .env —Ñ–∞–π–ª
            with open(env_file_path, 'w', encoding='utf-8') as f:
                f.writelines(env_lines)
            
            # –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
            load_dotenv(override=True)
            
            # –£–±–∏—Ä–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ø–∏—Å–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö
            self.waiting_for_token.discard(user_id)
            
            await update.message.reply_text(
                "‚úÖ Google OAuth —Ç–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!\n\n"
                "üîë –¢–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ .env —Ñ–∞–π–ª\n"
                "üîÑ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω—ã\n\n"
                "üìÅ –¢–µ–ø–µ—Ä—å –±–æ—Ç –º–æ–∂–µ—Ç –∑–∞–≥—Ä—É–∂–∞—Ç—å —Ñ–∞–π–ª—ã –Ω–∞ Google Drive —Å –Ω–æ–≤—ã–º —Ç–æ–∫–µ–Ω–æ–º."
            )
            
            logger.info(f"Google OAuth —Ç–æ–∫–µ–Ω –æ–±–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_id}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {e}")
            self.waiting_for_token.discard(user_id)
            await update.message.reply_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∫–æ–º–∞–Ω–¥–æ–π /token"
            )
    
    async def process_youtube_url(self, update: Update, url: str, config: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ YouTube —Å—Å—ã–ª–∫–∏"""
        await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É YouTube –≤–∏–¥–µ–æ...")
        
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç cookies –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
            result = await self.video_processor.process_youtube_video(url, config)
            
            if result['success']:
                await self.send_results(update, result)
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ YouTube: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ")
    
    async def process_video_file(self, update: Update, video, config: dict):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞"""
        await update.message.reply_text("üîÑ –ù–∞—á–∏–Ω–∞—é –æ–±—Ä–∞–±–æ—Ç–∫—É –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞...")
        
        try:
            # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
            file = await video.get_file()
            file_path = f"temp_video_{update.effective_user.id}.mp4"
            await file.download_to_drive(file_path)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
            result = await self.video_processor.process_video_file(file_path, config)
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            if os.path.exists(file_path):
                os.remove(file_path)
            
            if result['success']:
                await self.send_results(update, result)
            else:
                await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: {e}")
            await update.message.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∏–¥–µ–æ")
    
    async def send_results(self, update: Update, result: dict):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
        links_file = result.get('links_file')
        total_clips = result.get('total_clips', 0)
        
        await update.message.reply_text(
            f"‚úÖ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
            f"üìä –°–æ–∑–¥–∞–Ω–æ —à–æ—Ç—Å–æ–≤: {total_clips}\n"
            f"üìÅ –í—Å–µ —Ñ–∞–π–ª—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ Google Drive"
        )
        
        if links_file and os.path.exists(links_file):
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
            with open(links_file, 'rb') as f:
                await update.message.reply_document(
                    document=f,
                    filename="video_links.txt",
                    caption="üìã –°—Å—ã–ª–∫–∏ –Ω–∞ –≤—Å–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —à–æ—Ç—Å—ã"
                )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        application = Application.builder().token(self.token).build()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
        application.add_handler(CommandHandler("start", self.start))
        application.add_handler(CommandHandler("duration", self.set_duration))
        application.add_handler(CommandHandler("title", self.set_title))
        application.add_handler(CommandHandler("subtitle", self.set_subtitle))
        application.add_handler(CommandHandler("cookies", self.set_cookies))
        application.add_handler(CommandHandler("token", self.set_token))
        application.add_handler(CommandHandler("settings", self.show_settings))
        application.add_handler(CommandHandler("help", self.help_command))
        application.add_handler(MessageHandler(filters.TEXT | filters.VIDEO, self.handle_message))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
        application.run_polling()

if __name__ == '__main__':
    bot = TelegramBot()
    bot.run()
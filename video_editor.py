import os
import asyncio
import logging
import ffmpeg
import json
from pathlib import Path

logger = logging.getLogger(__name__)

class VideoEditor:
    def __init__(self):
        self.output_dir = Path("output")
        self.output_dir.mkdir(exist_ok=True)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
        self.font_path = "Obelix Pro.ttf"  # –ü—É—Ç—å –∫ —à—Ä–∏—Ñ—Ç—É
        self.title_color = "red"
        self.subtitle_color = "red"
    
    def get_video_info(self, video_path: str) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ"""
        try:
            probe = ffmpeg.probe(video_path)
            video_stream = next((stream for stream in probe['streams'] if stream['codec_type'] == 'video'), None)
            
            if not video_stream:
                raise ValueError("–í–∏–¥–µ–æ –ø–æ—Ç–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            
            duration = float(probe['format']['duration'])
            width = int(video_stream['width'])
            height = int(video_stream['height'])
            fps = eval(video_stream['r_frame_rate'])
            
            return {
                'duration': duration,
                'width': width,
                'height': height,
                'fps': fps
            }
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∏–¥–µ–æ: {e}")
            raise
    
    async def extract_segment(self, input_path: str, output_path: str, start_time: float, duration: float) -> bool:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞ –≤–∏–¥–µ–æ"""
        try:
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(
                None,
                self._extract_segment_sync,
                input_path, output_path, start_time, duration
            )
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å–µ–≥–º–µ–Ω—Ç–∞: {e}")
            return False
    
    def _extract_segment_sync(self, input_path: str, output_path: str, start_time: float, duration: float):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Å–µ–≥–º–µ–Ω—Ç–∞"""
        (
            ffmpeg
            .input(input_path, ss=start_time, t=duration)
            .output(output_path, vcodec='libx264', acodec='aac')
            .overwrite_output()
            .run(quiet=True, capture_output=True)
        )
    
    def _clear_cache(self):
        """–û—á–∏—Å—Ç–∫–∞ –∫–µ—à–∞ –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        if hasattr(self, '_cached_video_info'):
            delattr(self, '_cached_video_info')
        if hasattr(self, '_cached_video_path'):
            delattr(self, '_cached_video_path')
        if hasattr(self, '_cached_scaling_info'):
            delattr(self, '_cached_scaling_info')

    async def create_clips_parallel(self, video_path: str, clip_duration: int, subtitles: list, start_index: int = 0, config: dict = None, max_parallel: int = 4) -> list:
        """–ü–†–û–°–¢–û–ï –∏ –ù–ê–î–ï–ñ–ù–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–ø–æ–≤ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–π –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å—é"""
        try:
            # –û—á–∏—â–∞–µ–º –∫–µ—à –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞
            self._clear_cache()
            
            logger.info(f"üé¨ –ù–ê–ß–ò–ù–ê–ï–ú –æ–±—Ä–∞–±–æ—Ç–∫—É —Ñ–∞–π–ª–∞: {video_path}")
            
            video_info = self.get_video_info(video_path)
            total_duration = video_info['duration']
            
            # –ü–ª–∞–Ω–∏—Ä—É–µ–º –∫–ª–∏–ø—ã
            clips_to_create = []
            current_time = 0
            clip_index = start_index
            
            while current_time < total_duration:
                remaining_time = total_duration - current_time
                
                if remaining_time < clip_duration:
                    logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Å–æ–∫: {remaining_time:.1f} —Å–µ–∫ < {clip_duration} —Å–µ–∫")
                    break
                
                clip_path = self.output_dir / f"clip_{clip_index:03d}.mp4"
                clips_to_create.append({
                    'input_path': video_path,
                    'output_path': str(clip_path),
                    'start_time': current_time,
                    'duration': clip_duration,
                    'subtitles': subtitles,
                    'clip_number': clip_index + 1,
                    'config': config
                })
                
                current_time += clip_duration
                clip_index += 1
            
            logger.info(f"üöÄ –ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å {len(clips_to_create)} –∫–ª–∏–ø–æ–≤, –º–∞–∫—Å. –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ: {max_parallel}")
            
            # –ü–†–û–°–¢–ê–Ø –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ü–ê–ö–ï–¢–ê–ú–ò
            created_clips = []
            
            # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –ø–∞–∫–µ—Ç—ã –ø–æ max_parallel
            for i in range(0, len(clips_to_create), max_parallel):
                batch = clips_to_create[i:i + max_parallel]
                logger.info(f"üì¶ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–∞–∫–µ—Ç {i//max_parallel + 1}: –∫–ª–∏–ø—ã {i+1}-{min(i+max_parallel, len(clips_to_create))}")
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–∞–∫–µ—Ç–∞
                batch_tasks = []
                for task in batch:
                    batch_tasks.append(self._create_single_clip(task))
                
                # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á –≤ –ø–∞–∫–µ—Ç–µ
                try:
                    batch_results = await asyncio.gather(*batch_tasks, return_exceptions=True)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    for j, result in enumerate(batch_results):
                        if isinstance(result, Exception):
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–∞ {batch[j]['clip_number']}: {result}")
                        elif result:
                            created_clips.append(result)
                            logger.info(f"‚úÖ –ö–ª–∏–ø {batch[j]['clip_number']} –≥–æ—Ç–æ–≤: {result}")
                        else:
                            logger.warning(f"‚ö†Ô∏è –ö–ª–∏–ø {batch[j]['clip_number']} –Ω–µ —Å–æ–∑–¥–∞–Ω")
                            
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∞–∫–µ—Ç–∞: {e}")
                    continue
                
                # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                if i + max_parallel < len(clips_to_create):
                    await asyncio.sleep(1)
            
            logger.info(f"‚úÖ –ó–ê–í–ï–†–®–ï–ù–ê –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {video_path}: —Å–æ–∑–¥–∞–Ω–æ {len(created_clips)}/{len(clips_to_create)} –∫–ª–∏–ø–æ–≤")
            return created_clips
            
        except Exception as e:
            logger.error(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–æ–≤ –∏–∑ {video_path}: {e}")
            return []
    
    async def _create_single_clip(self, task: dict) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ –∫–ª–∏–ø–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        try:
            logger.info(f"üìù –°–æ–∑–¥–∞–µ–º –∫–ª–∏–ø {task['clip_number']} ({task['start_time']:.1f}-{task['start_time'] + task['duration']:.1f}—Å)")
            
            success = await self.create_styled_clip(
                task['input_path'],
                task['output_path'],
                task['start_time'],
                task['duration'],
                task['subtitles'],
                task['clip_number'],
                task['config']
            )
            
            if success and os.path.exists(task['output_path']):
                return task['output_path']
            else:
                logger.error(f"‚ùå –ö–ª–∏–ø {task['clip_number']} –Ω–µ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ —Ñ–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–∞ {task['clip_number']}: {e}")
            return None

    async def create_clips(self, video_path: str, clip_duration: int, subtitles: list, start_index: int = 0, config: dict = None) -> list:
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–ø–æ–≤ –∏–∑ –≤–∏–¥–µ–æ —Å–æ —Å—Ç—Ä–æ–≥–∏–º —Ç–∞–π–º–ª–∞–π–Ω–æ–º"""
        try:
            video_info = self.get_video_info(video_path)
            total_duration = video_info['duration']
            
            clips = []
            current_time = 0
            clip_index = start_index
            skipped_clips = 0
            
            while current_time < total_duration:
                end_time = current_time + clip_duration
                
                # –°–¢–†–û–ì–ò–ô –¢–ê–ô–ú–õ–ê–ô–ù: —Ç–æ–ª—å–∫–æ –∫–ª–∏–ø—ã —Ç–æ—á–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                remaining_time = total_duration - current_time
                
                # –ï—Å–ª–∏ –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ –∑–∞–¥–∞–Ω–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
                if remaining_time < clip_duration:
                    logger.info(f"–ü—Ä–æ–ø—É—â–µ–Ω –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫—É—Å–æ–∫: {remaining_time:.1f} —Å–µ–∫ < {clip_duration} —Å–µ–∫ (—Å—Ç—Ä–æ–≥–∏–π —Ç–∞–π–º–ª–∞–π–Ω)")
                    skipped_clips += 1
                    break
                
                clip_path = self.output_dir / f"clip_{clip_index:03d}.mp4"
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–ø —Å —Ç–æ—á–Ω–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é
                success = await self.create_styled_clip(
                    video_path,
                    str(clip_path),
                    current_time,
                    clip_duration,  # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ—á–Ω—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                    subtitles,
                    clip_index + 1,
                    config
                )
                
                if success:
                    clips.append(str(clip_path))
                    logger.info(f"–°–æ–∑–¥–∞–Ω –∫–ª–∏–ø {clip_index + 1}: {current_time:.1f}-{current_time + clip_duration:.1f} —Å–µ–∫ ({clip_duration} —Å–µ–∫)")
                    clip_index += 1
                else:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–ª–∏–ø {clip_index + 1}")
                
                current_time += clip_duration
            
            # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            expected_clips = int(total_duration // clip_duration)
            logger.info(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–û–ó–î–ê–ù–ò–Ø –ö–õ–ò–ü–û–í:")
            logger.info(f"   –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤–∏–¥–µ–æ: {total_duration:.1f} —Å–µ–∫")
            logger.info(f"   –û–∂–∏–¥–∞–ª–æ—Å—å –∫–ª–∏–ø–æ–≤: {expected_clips}")
            logger.info(f"   –°–æ–∑–¥–∞–Ω–æ –∫–ª–∏–ø–æ–≤: {len(clips)}")
            logger.info(f"   –ü—Ä–æ–ø—É—â–µ–Ω–æ –∫–ª–∏–ø–æ–≤: {skipped_clips}")
            logger.info(f"   –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {len(clips)/expected_clips*100:.1f}%")
            
            return clips
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–ø–æ–≤: {e}")
            return []
    
    async def create_styled_clip(self, input_path: str, output_path: str, start_time: float, 
                               duration: float, subtitles: list, clip_number: int, config: dict = None) -> bool:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–ø–∞"""
        try:
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(
                None,
                self._create_styled_clip_sync,
                input_path, output_path, start_time, duration, subtitles, clip_number, config
            )
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–ø–∞: {e}")
            return False
    
    def _create_styled_clip_sync(self, input_path: str, output_path: str, start_time: float,
                               duration: float, subtitles: list, clip_number: int, config: dict = None):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∏–ø–∞ —Å GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º"""
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU
        gpu_available = self._check_gpu_support()
        
        # –í—Å–µ–≥–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU –≤–≤–æ–¥ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏ –≤ Colab
        main_video = ffmpeg.input(input_path, ss=start_time, t=duration)
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–º—ã—Ç—ã–π —Ñ–æ–Ω (—Ä–∞—Å—Ç—è–≥–∏–≤–∞–µ–º –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω) - –í–ï–†–¢–ò–ö–ê–õ–¨–ù–´–ô –§–û–†–ú–ê–¢
        blurred_bg = (
            main_video
            .video
            .filter('scale', 1080, 1920, force_original_aspect_ratio='increase')  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π
            .filter('crop', 1080, 1920)  # –û–±—Ä–µ–∑–∞–µ–º –¥–æ —Ç–æ—á–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
            .filter('gblur', sigma=20)
        )
        
        # –û—Å–Ω–æ–≤–Ω–æ–µ –≤–∏–¥–µ–æ –ø–æ —Ü–µ–Ω—Ç—Ä—É - –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û–ï –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ–±—Ä–µ–∑–∫–æ–π
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏—Å—Ö–æ–¥–Ω–æ–º –≤–∏–¥–µ–æ (–∫–µ—à–∏—Ä—É–µ–º –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –≤—ã–∑–æ–≤–æ–≤)
        if not hasattr(self, '_cached_video_info') or self._cached_video_path != input_path:
            self._cached_video_info = self.get_video_info(input_path)
            self._cached_video_path = input_path
            
            # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–∞–π–ª–∞
            original_width = self._cached_video_info['width']
            original_height = self._cached_video_info['height']
            original_fps = self._cached_video_info['fps']
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–∞—á–µ—Å—Ç–≤–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ
            quality_type = "SD"
            if original_height >= 2160:
                quality_type = "4K"
            elif original_height >= 1440:
                quality_type = "2K"
            elif original_height >= 1080:
                quality_type = "1080p"
            elif original_height >= 720:
                quality_type = "720p"
            
            logger.info(f"üé¨ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ {quality_type} ‚Üí –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        video_info = self._cached_video_info
        original_width = video_info['width']
        original_height = video_info['height']
        original_fps = video_info['fps']
        
        # –¶–µ–ª–µ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ (9:16)
        target_screen_width = 1080
        target_screen_height = 1920
        
        # –ö–†–£–ü–ù–û–ï –¶–ï–ù–¢–†–ê–õ–¨–ù–û–ï –í–ò–î–ï–û: –∑–∞–ø–æ–ª–Ω—è–µ–º –±–æ–ª—å—à—É—é —á–∞—Å—Ç—å —ç–∫—Ä–∞–Ω–∞ —Å –æ–±—Ä–µ–∑–∫–æ–π
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
        original_aspect = original_width / original_height
        target_aspect = target_screen_width / target_screen_height  # 9:16 = 0.5625
        
        # –î–ª—è –±–æ–ª—å—à–∏—Ö –≤–∏–¥–µ–æ (4K+) –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –∞–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
        is_large_video = original_width >= 2160 or original_height >= 2160
        
        # –ê–ì–†–ï–°–°–ò–í–ù–û–ï –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–ï: –æ—Å–Ω–æ–≤–Ω–æ–µ –≤–∏–¥–µ–æ –∑–∞–Ω–∏–º–∞–µ—Ç 80% –≤—ã—Å–æ—Ç—ã —ç–∫—Ä–∞–Ω–∞
        # –≠—Ç–æ —Å–¥–µ–ª–∞–µ—Ç –µ–≥–æ –æ—á–µ–Ω—å –∫—Ä—É–ø–Ω—ã–º, —Å –æ–±—Ä–µ–∑–∫–æ–π –ø–æ –±–æ–∫–∞–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        center_video_height = int(target_screen_height * 0.8)  # 80% –≤—ã—Å–æ—Ç—ã —ç–∫—Ä–∞–Ω–∞ (1536px)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è (–ª–æ–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –¥–ª—è —Ñ–∞–π–ª–∞)
        if not hasattr(self, '_cached_scaling_info') or self._cached_video_path != input_path:
            if original_aspect > target_aspect:
                # –®–∏—Ä–æ–∫–æ–µ –≤–∏–¥–µ–æ - –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ –í–´–°–û–¢–ï –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞
                target_height = center_video_height
                target_width = int(target_height * original_aspect)
                
                # –ï—Å–ª–∏ —à–∏—Ä–∏–Ω–∞ –±–æ–ª—å—à–µ —ç–∫—Ä–∞–Ω–∞ - –ø—É—Å—Ç—å –æ–±—Ä–µ–∑–∞–µ—Ç—Å—è, –∫–∞–∫ –≤—ã –ø—Ä–æ—Å–∏–ª–∏
                crop_needed = target_width > target_screen_width
                if crop_needed:
                    crop_width = target_screen_width
                    crop_height = target_height
                    
            else:
                # –í—ã—Å–æ–∫–æ–µ –∏–ª–∏ –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –≤–∏–¥–µ–æ - —Ç–æ–∂–µ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º –ø–æ –≤—ã—Å–æ—Ç–µ
                target_height = center_video_height
                target_width = int(target_height * original_aspect)
                crop_needed = False
            
            # –£–±–µ–∂–¥–∞–µ–º—Å—è, —á—Ç–æ —Ä–∞–∑–º–µ—Ä—ã —á–µ—Ç–Ω—ã–µ
            target_width = target_width - (target_width % 2)
            target_height = target_height - (target_height % 2)
            
            # –ö–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            self._cached_scaling_info = {
                'target_width': target_width,
                'target_height': target_height,
                'crop_needed': crop_needed,
                'crop_width': crop_width if crop_needed else target_width,
                'crop_height': crop_height if crop_needed else target_height,
                'is_large_video': is_large_video
            }
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
        scaling_info = self._cached_scaling_info
        target_width = scaling_info['target_width']
        target_height = scaling_info['target_height']
        crop_needed = scaling_info['crop_needed']
        crop_width = scaling_info['crop_width']
        crop_height = scaling_info['crop_height']
        is_large_video = scaling_info['is_large_video']
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –±–æ–ª—å—à–∏—Ö –≤–∏–¥–µ–æ
        if is_large_video:
            # –î–ª—è –±–æ–ª—å—à–∏—Ö –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
            main_scaled = (
                main_video
                .video
                .filter('scale', target_width, target_height, 
                       flags='lanczos')  # –í—ã—Å–æ–∫–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –∞–ª–≥–æ—Ä–∏—Ç–º
            )
        else:
            # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            main_scaled = (
                main_video
                .video
                .filter('scale', target_width, target_height)
            )
        
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–∞ –æ–±—Ä–µ–∑–∫–∞ –ø–æ –±–æ–∫–∞–º - –ø—Ä–∏–º–µ–Ω—è–µ–º crop —Ñ–∏–ª—å—Ç—Ä
        if crop_needed:
            main_scaled = main_scaled.filter('crop', crop_width, crop_height, 
                                           x='(iw-ow)/2', y='(ih-oh)/2')  # –û–±—Ä–µ–∑–∞–µ–º –ø–æ —Ü–µ–Ω—Ç—Ä—É
        
        # –ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –≤–∏–¥–µ–æ –Ω–∞ —Ä–∞–∑–º—ã—Ç—ã–π —Ñ–æ–Ω
        video_with_bg = ffmpeg.filter([blurred_bg, main_scaled], 'overlay', 
                                    x='(W-w)/2', y='(H-h)/2')
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏–∑ config
        if config:
            title_template = config.get('title', '–§–†–ê–ì–ú–ï–ù–¢')
            subtitle_template = config.get('subtitle', '–ß–∞—Å—Ç—å')
            custom_title = config.get('custom_title', False)
            custom_subtitle = config.get('custom_subtitle', False)
        else:
            title_template = '–§–†–ê–ì–ú–ï–ù–¢'
            subtitle_template = '–ß–∞—Å—Ç—å'
            custom_title = False
            custom_subtitle = False
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        if custom_title:
            # –ï—Å–ª–∏ –∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π - –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ñ—Ä—É
            title_text = title_template
        else:
            # –ï—Å–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∫–ª–∏–ø–∞
            title_text = f"{title_template} {clip_number}"
            
        if custom_subtitle:
            # –ï—Å–ª–∏ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π - –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —Ü–∏—Ñ—Ä—É
            subtitle_text = subtitle_template
        else:
            # –ï—Å–ª–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π - –¥–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä –∫–ª–∏–ø–∞
            subtitle_text = f"{subtitle_template} {clip_number}"
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫ (—Å–≤–µ—Ä—Ö—É) - –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å 8 —Å–µ–∫—É–Ω–¥—ã –ë–ï–ó –∞–Ω–∏–º–∞—Ü–∏–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
        title_start_time = 8.0  # –ó–∞–≥–æ–ª–æ–≤–∫–∏ –ø–æ—è–≤–ª—è—é—Ç—Å—è —Å 8 —Å–µ–∫—É–Ω–¥—ã
        
        video_with_title = video_with_bg.drawtext(
            text=title_text,
            fontfile=self.font_path if os.path.exists(self.font_path) else None,
            fontsize=60,
            fontcolor=self.title_color,
            x='(w-text_w)/2',
            y='100',
            enable=f'between(t,{title_start_time},{duration})'
        )
        
        # –ü–æ–¥–∑–∞–≥–æ–ª–æ–≤–æ–∫ (–ø–æ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º) - –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å 8 —Å–µ–∫—É–Ω–¥—ã
        video_with_subtitle = video_with_title.drawtext(
            text=subtitle_text,
            fontfile=self.font_path if os.path.exists(self.font_path) else None,
            fontsize=80,  # –ë–æ–ª—å—à–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞
            fontcolor=self.subtitle_color,
            x='(w-text_w)/2',
            y='200',
            enable=f'between(t,{title_start_time},{duration})'
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
        final_video = self._add_animated_subtitles(
            video_with_subtitle, 
            subtitles, 
            start_time, 
            duration
        )
        
        # –ê—É–¥–∏–æ
        audio = main_video.audio
        
        # –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –¥–æ–±–∞–≤–ª—è–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ 9:16
        final_video_scaled = final_video.filter('scale', 1080, 1920, force_original_aspect_ratio='decrease').filter('pad', 1080, 1920, '(ow-iw)/2', '(oh-ih)/2')
        
        # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥ —Å GPU/CPU –∫–æ–¥–∏—Ä–æ–≤—â–∏–∫–æ–º
        if gpu_available:
            # GPU —É—Å–∫–æ—Ä–µ–Ω–Ω—ã–π –≤—ã–≤–æ–¥ (NVIDIA NVENC) - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
            try:
                (
                    ffmpeg
                    .output(final_video_scaled, audio, output_path, 
                           vcodec='h264_nvenc',    # GPU –∫–æ–¥–∏—Ä–æ–≤—â–∏–∫ NVIDIA
                           acodec='aac',
                           preset='p4',            # NVENC –ø—Ä–µ—Å–µ—Ç (p1-p7, p4 = medium)
                           rc='vbr',               # Variable bitrate –¥–ª—è NVENC
                           cq=23,                  # –ö–∞—á–µ—Å—Ç–≤–æ –¥–ª—è NVENC
                           pix_fmt='yuv420p',      # –°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å
                           **{'b:v': '6M',         # –ö–æ–Ω—Å–µ—Ä–≤–∞—Ç–∏–≤–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç
                              'b:a': '128k',       # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç –∞—É–¥–∏–æ
                              'maxrate': '8M',     # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç
                              'bufsize': '12M'})   # –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
                    .overwrite_output()
                    .run(quiet=True, capture_output=True)
                )
                pass  # –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å GPU
            except Exception as nvenc_error:
                # Fallback –Ω–∞ CPU
                (
                    ffmpeg
                    .output(final_video_scaled, audio, output_path, 
                           vcodec='libx264',
                           acodec='aac',
                           preset='fast',
                           crf=23,
                           pix_fmt='yuv420p',
                           **{'b:a': '128k',
                              'maxrate': '8M',
                              'bufsize': '12M',
                              'profile:v': 'main',
                              'level': '4.0'})
                    .overwrite_output()
                    .run(quiet=True, capture_output=True)
                )
        else:
            # CPU –≤—ã–≤–æ–¥ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∫–∞—á–µ—Å—Ç–≤–æ–º –¥–ª—è –±–æ–ª—å—à–∏—Ö –≤–∏–¥–µ–æ
            if is_large_video:
                # –î–ª—è –±–æ–ª—å—à–∏—Ö –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
                (
                    ffmpeg
                    .output(final_video_scaled, audio, output_path, 
                           vcodec='libx264',
                           acodec='aac',
                           preset='fast',          # –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–µ—Å–µ—Ç –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                           crf=23,                 # –†–∞–∑—É–º–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                           pix_fmt='yuv420p',
                           **{'b:a': '128k',       # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç –∞—É–¥–∏–æ
                              'maxrate': '8M',     # –†–∞–∑—É–º–Ω—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç
                              'bufsize': '12M',    # –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
                              'profile:v': 'main', # –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å (–±–æ–ª–µ–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π)
                              'level': '4.0'})     # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è Full HD
                    .overwrite_output()
                    .run(quiet=True, capture_output=True)
                )
                pass  # –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Å CPU
            else:
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ï –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
                (
                    ffmpeg
                    .output(final_video_scaled, audio, output_path, 
                           vcodec='libx264',
                           acodec='aac',
                           preset='fast',          # –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–µ—Å–µ—Ç –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
                           crf=23,                 # –†–∞–∑—É–º–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ
                           pix_fmt='yuv420p',
                           **{'b:a': '128k',       # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç –∞—É–¥–∏–æ
                              'maxrate': '8M',     # –†–∞–∑—É–º–Ω—ã–π –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∏—Ç—Ä–µ–π—Ç
                              'bufsize': '12M',    # –†–∞–∑–º–µ—Ä –±—É—Ñ–µ—Ä–∞
                              'profile:v': 'main', # –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å (–±–æ–ª–µ–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π)
                              'level': '4.0'})     # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è Full HD
                    .overwrite_output()
                    .run(quiet=True, capture_output=True)
                )
    
    def _add_animated_subtitles(self, video, subtitles: list, start_time: float, duration: float):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—É–±—Ç–∏—Ç—Ä–æ–≤"""
        if not subtitles:
            return video
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–µ–≥–º–µ–Ω—Ç–∞
        segment_subtitles = []
        for sub in subtitles:
            sub_start = sub['start'] - start_time
            sub_end = sub['end'] - start_time
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø–æ–ø–∞–¥–∞–µ—Ç –ª–∏ —Å—É–±—Ç–∏—Ç—Ä –≤ —Ç–µ–∫—É—â–∏–π —Å–µ–≥–º–µ–Ω—Ç
            if sub_end > 0 and sub_start < duration:
                # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –¥–ª—è —Å–µ–≥–º–µ–Ω—Ç–∞
                adjusted_start = max(0, sub_start)
                adjusted_end = min(duration, sub_end)
                
                segment_subtitles.append({
                    'text': sub['text'],
                    'start': adjusted_start,
                    'end': adjusted_end
                })
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–∂–¥—ã–π —Å—É–±—Ç–∏—Ç—Ä —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π –ø–æ–¥–ø—Ä—ã–≥–∏–≤–∞–Ω–∏—è
        result_video = video
        for i, sub in enumerate(segment_subtitles):
            # –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –∞–Ω–∏–º–∞—Ü–∏—è –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            y_pos = f"h-200-20*abs(sin(2*PI*(t-{sub['start']})*2))"
            
            result_video = result_video.drawtext(
                text=sub['text'],
                fontfile=self.font_path if os.path.exists(self.font_path) else None,
                fontsize=70,  # –£–≤–µ–ª–∏—á–∏–ª —Ä–∞–∑–º–µ—Ä —Å—É–±—Ç–∏—Ç—Ä–æ–≤
                fontcolor='white',
                bordercolor='black',
                borderw=3,  # –£–≤–µ–ª–∏—á–∏–ª —Ç–æ–ª—â–∏–Ω—É –æ–±–≤–æ–¥–∫–∏
                x='(w-text_w)/2',
                y=y_pos,
                enable=f"between(t,{sub['start']},{sub['end']})"
            )
        
        return result_video
    
    def _check_gpu_support(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ GPU –¥–ª—è ffmpeg"""
        try:
            import subprocess
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å NVENC (NVIDIA GPU –∫–æ–¥–∏—Ä–æ–≤—â–∏–∫)
            result = subprocess.run(
                ['ffmpeg', '-hide_banner', '-encoders'], 
                capture_output=True, 
                text=True, 
                timeout=10
            )
            
            if 'h264_nvenc' in result.stdout:
                return True
            else:
                return False
                
        except Exception as e:
            return False
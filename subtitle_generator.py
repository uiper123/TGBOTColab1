import os
import asyncio
import logging
import tempfile
from pathlib import Path

logger = logging.getLogger(__name__)

class SubtitleGenerator:
    def __init__(self):
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ª–µ–≥–∫—É—é –º–æ–¥–µ–ª—å Whisper
        self.model = None
        self.model_name = "base"  # –ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "tiny" –¥–ª—è –µ—â–µ –±–æ–ª—å—à–µ–π —Å–∫–æ—Ä–æ—Å—Ç–∏
        self.whisper_available = False
        self._check_whisper()
    
    def _check_whisper(self):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Whisper"""
        try:
            import whisper
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ñ—É–Ω–∫—Ü–∏—è load_model
            if hasattr(whisper, 'load_model'):
                self.whisper = whisper
                self.whisper_available = True
                logger.info("‚úÖ OpenAI Whisper –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                logger.error("‚ùå OpenAI Whisper —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ load_model –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                self._try_alternative_whisper()
        except ImportError:
            logger.error("‚ùå OpenAI Whisper –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            self._try_alternative_whisper()
    
    def _try_alternative_whisper(self):
        """–ü–æ–ø—ã—Ç–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ –≤–µ—Ä—Å–∏–∏ Whisper"""
        try:
            # –ü—Ä–æ–±—É–µ–º faster-whisper
            import faster_whisper
            self.whisper = faster_whisper
            self.whisper_available = True
            self.use_faster_whisper = True
            logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º faster-whisper –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É")
        except ImportError:
            try:
                # –ü—Ä–æ–±—É–µ–º whisper-jax
                import whisper_jax
                self.whisper = whisper_jax
                self.whisper_available = True
                self.use_whisper_jax = True
                logger.info("‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ–º whisper-jax –∫–∞–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—É")
            except ImportError:
                logger.error("‚ùå –ù–∏ –æ–¥–Ω–∞ –≤–µ—Ä—Å–∏—è Whisper –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞")
                self.whisper_available = False
    
    def _load_model(self):
        """–õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∏ GPU"""
        if not self.whisper_available:
            logger.error("Whisper –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å—É–±—Ç–∏—Ç—Ä—ã –Ω–µ –±—É–¥—É—Ç —Å–æ–∑–¥–∞–Ω—ã")
            return False
            
        if self.model is None:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU
                gpu_available = self._check_gpu_support()
                
                logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ Whisper: {self.model_name}")
                
                if hasattr(self, 'use_faster_whisper'):
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º faster-whisper —Å GPU –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
                    from faster_whisper import WhisperModel
                    if gpu_available:
                        self.model = WhisperModel(self.model_name, device="cuda", compute_type="float16")
                        logger.info("üéÆ faster-whisper –∑–∞–≥—Ä—É–∂–µ–Ω —Å GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º")
                    else:
                        self.model = WhisperModel(self.model_name, device="cpu")
                        logger.info("üíª faster-whisper –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ CPU")
                elif hasattr(self, 'use_whisper_jax'):
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º whisper-jax (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç GPU –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω)
                    self.model = self.whisper.load_model(self.model_name)
                    logger.info("üéÆ whisper-jax –∑–∞–≥—Ä—É–∂–µ–Ω (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ GPU)")
                else:
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—ã–π OpenAI Whisper
                    import torch
                    if gpu_available and torch.cuda.is_available():
                        self.model = self.whisper.load_model(self.model_name, device="cuda")
                        logger.info("üéÆ OpenAI Whisper –∑–∞–≥—Ä—É–∂–µ–Ω —Å GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º")
                    else:
                        self.model = self.whisper.load_model(self.model_name, device="cpu")
                        logger.info("üíª OpenAI Whisper –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ CPU")
                    
                logger.info("‚úÖ –ú–æ–¥–µ–ª—å Whisper –∑–∞–≥—Ä—É–∂–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
                return True
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ Whisper: {e}")
                self.whisper_available = False
                return False
        
        return True
    
    def _check_gpu_support(self) -> bool:
        """–ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ GPU –¥–ª—è Whisper."""
        try:
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ NVIDIA GPU —Å –ø–æ–º–æ—â—å—é nvidia-smi
            import subprocess
            try:
                subprocess.check_output(['nvidia-smi'])
                logger.info("‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω NVIDIA GPU.")
            except (subprocess.CalledProcessError, FileNotFoundError):
                logger.info("NVIDIA GPU –Ω–µ –Ω–∞–π–¥–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU.")
                return False

            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ PyTorch —Å CUDA
            import torch
            if torch.cuda.is_available():
                logger.info(f"‚úÖ PyTorch CUDA –¥–æ—Å—Ç—É–ø–µ–Ω: {torch.cuda.get_device_name(0)}")
                return True
            else:
                logger.info("‚ùå PyTorch CUDA –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU.")
                return False

        except ImportError:
            logger.info("PyTorch –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è CPU.")
            return False
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ GPU: {e}")
            return False
    
    async def generate(self, video_path: str) -> list:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –¥–ª—è –≤–∏–¥–µ–æ"""
        try:
            loop = asyncio.get_event_loop()
            subtitles = await loop.run_in_executor(
                None,
                self._generate_sync,
                video_path
            )
            return subtitles
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")
            return []
    
    def _generate_sync(self, video_path: str) -> list:
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–æ—Å—å –ª–∏ –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å
            if not self._load_model():
                logger.warning("–ú–æ–¥–µ–ª—å Whisper –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç—ã–µ —Å—É–±—Ç–∏—Ç—Ä—ã")
                return []
            
            logger.info(f"–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –¥–ª—è: {video_path}")
            
            # –†–∞–∑–Ω—ã–µ —Å–ø–æ—Å–æ–±—ã —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ Whisper
            if hasattr(self, 'use_faster_whisper'):
                # faster-whisper –∏–º–µ–µ—Ç –¥—Ä—É–≥–æ–π API
                segments, info = self.model.transcribe(
                    video_path,
                    language='ru',
                    word_timestamps=True
                )
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç OpenAI Whisper
                result = {'segments': []}
                for segment in segments:
                    result['segments'].append({
                        'start': segment.start,
                        'end': segment.end,
                        'text': segment.text,
                        'words': [{'word': word.word, 'start': word.start, 'end': word.end} 
                                 for word in segment.words] if hasattr(segment, 'words') else []
                    })
            else:
                # –û–±—ã—á–Ω—ã–π OpenAI Whisper –∏–ª–∏ whisper-jax
                result = self.model.transcribe(
                    video_path,
                    language='ru',  # –†—É—Å—Å–∫–∏–π —è–∑—ã–∫
                    word_timestamps=True,  # –í—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏ –¥–ª—è —Å–ª–æ–≤
                    verbose=False
                )
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å —Å—É–±—Ç–∏—Ç—Ä—ã –ø–æ —Å–ª–æ–≤–∞–º –∏–∑ —Å–µ–≥–º–µ–Ω—Ç–æ–≤
            word_subtitles = []
            for segment in result['segments']:
                if 'words' in segment and segment['words']:
                    # –ï—Å–ª–∏ –≤ —Å–µ–≥–º–µ–Ω—Ç–µ –µ—Å—Ç—å —Å–ª–æ–≤–∞ —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –º–µ—Ç–∫–∞–º–∏
                    for word_info in segment['words']:
                        word = word_info.get('word', '').strip()
                        start = word_info.get('start', segment['start'])
                        end = word_info.get('end', segment['end'])
                        
                        if word:
                            word_subtitles.append({
                                'start': start,
                                'end': end,
                                'text': word
                            })
                else:
                    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã—Ö —Å–ª–æ–≤, —Ä–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç —Å–µ–≥–º–µ–Ω—Ç–∞ –Ω–∞ —Å–ª–æ–≤–∞
                    words = segment['text'].strip().split()
                    if words:
                        segment_duration = segment['end'] - segment['start']
                        word_duration = segment_duration / len(words)
                        
                        for i, word in enumerate(words):
                            start = segment['start'] + (i * word_duration)
                            end = start + word_duration
                            
                            word_subtitles.append({
                                'start': start,
                                'end': end,
                                'text': word
                            })
            
            if word_subtitles:
                logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(word_subtitles)} —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –ø–æ —Å–ª–æ–≤–∞–º")
                return word_subtitles
            
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ª–æ–≤–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–µ–≥–º–µ–Ω—Ç—ã
            subtitles = []
            for segment in result['segments']:
                subtitle = {
                    'start': segment['start'],
                    'end': segment['end'],
                    'text': segment['text'].strip()
                }
                subtitles.append(subtitle)
            
            logger.info(f"–°–æ–∑–¥–∞–Ω–æ {len(subtitles)} —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –ø–æ —Å–µ–≥–º–µ–Ω—Ç–∞–º")
            return subtitles
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å—É–±—Ç–∏—Ç—Ä–æ–≤: {e}")
            return []
    
    def _create_word_subtitles(self, words: list) -> list:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –ø–æ –æ–¥–Ω–æ–º—É —Å–ª–æ–≤—É –¥–ª—è –ª—É—á—à–µ–π –∞–Ω–∏–º–∞—Ü–∏–∏"""
        try:
            subtitles = []
            
            for word_info in words:
                word = word_info.get('word', '').strip()
                start = word_info.get('start', 0)
                end = word_info.get('end', 0)
                
                if not word:
                    continue
                
                # –°–æ–∑–¥–∞–µ–º —Å—É–±—Ç–∏—Ç—Ä –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–ª–æ–≤–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
                subtitle = {
                    'start': start,
                    'end': end,
                    'text': word
                }
                subtitles.append(subtitle)
            
            return subtitles
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –ø–æ —Å–ª–æ–≤–∞–º: {e}")
            return []
    
    def save_srt(self, subtitles: list, output_path: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ SRT"""
        try:
            with open(output_path, 'w', encoding='utf-8') as f:
                for i, sub in enumerate(subtitles, 1):
                    start_time = self._seconds_to_srt_time(sub['start'])
                    end_time = self._seconds_to_srt_time(sub['end'])
                    
                    f.write(f"{i}\n")
                    f.write(f"{start_time} --> {end_time}\n")
                    f.write(f"{sub['text']}\n\n")
            
            logger.info(f"–°—É–±—Ç–∏—Ç—Ä—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã: {output_path}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è SRT: {e}")
    
    def _seconds_to_srt_time(self, seconds: float) -> str:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Å–µ–∫—É–Ω–¥ –≤ —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ SRT"""
        hours = int(seconds // 3600)
        minutes = int((seconds % 3600) // 60)
        secs = int(seconds % 60)
        millisecs = int((seconds % 1) * 1000)
        
        return f"{hours:02d}:{minutes:02d}:{secs:02d},{millisecs:03d}"
#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ–º YouTube vs –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã
"""

import asyncio
import logging
import ffmpeg
from dotenv import load_dotenv
from pathlib import Path
from video_editor import VideoEditor

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)

def analyze_video_detailed(video_path: str):
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞"""
    try:
        print(f"\nüîç –ê–ù–ê–õ–ò–ó –í–ò–î–ï–û: {video_path}")
        print("=" * 60)
        
        probe = ffmpeg.probe(video_path)
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        format_info = probe['format']
        print(f"üìÅ –§–æ—Ä–º–∞—Ç: {format_info.get('format_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
        print(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {float(format_info.get('duration', 0)):.2f} —Å–µ–∫")
        print(f"üìä –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {int(format_info.get('size', 0)) / 1024 / 1024:.2f} –ú–ë")
        
        # –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
        for i, stream in enumerate(probe['streams']):
            print(f"\nüì∫ –ü–û–¢–û–ö {i}: {stream['codec_type']}")
            
            if stream['codec_type'] == 'video':
                width = stream.get('width', 0)
                height = stream.get('height', 0)
                fps = stream.get('r_frame_rate', '0/1')
                codec = stream.get('codec_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                pixel_format = stream.get('pix_fmt', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                
                # –í—ã—á–∏—Å–ª—è–µ–º FPS
                try:
                    fps_num, fps_den = map(int, fps.split('/'))
                    fps_value = fps_num / fps_den if fps_den != 0 else 0
                except:
                    fps_value = 0
                
                print(f"   üìê –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {width}x{height}")
                print(f"   üé¨ FPS: {fps_value:.2f}")
                print(f"   üé• –ö–æ–¥–µ–∫: {codec}")
                print(f"   üé® –ü–∏–∫—Å–µ–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: {pixel_format}")
                
                # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
                if width > 0 and height > 0:
                    aspect_ratio = width / height
                    print(f"   üìè –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω: {aspect_ratio:.3f}")
                    
                    if aspect_ratio > 1.7:
                        print("   üì± –¢–∏–ø: –®–∏—Ä–æ–∫–æ—ç–∫—Ä–∞–Ω–Ω–æ–µ (16:9 –∏–ª–∏ —à–∏—Ä–µ)")
                    elif aspect_ratio < 0.6:
                        print("   üì± –¢–∏–ø: –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω–æ–µ (9:16 –∏–ª–∏ —É–∂–µ)")
                    else:
                        print("   üì± –¢–∏–ø: –ö–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ –∏–ª–∏ –±–ª–∏–∑–∫–æ –∫ –Ω–µ–º—É")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                if 'tags' in stream:
                    tags = stream['tags']
                    if 'rotate' in tags:
                        print(f"   üîÑ –ü–æ–≤–æ—Ä–æ—Ç: {tags['rotate']}¬∞")
                
                # SAR –∏ DAR (Sample/Display Aspect Ratio)
                sar = stream.get('sample_aspect_ratio', '1:1')
                dar = stream.get('display_aspect_ratio', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                print(f"   üìä SAR: {sar}, DAR: {dar}")
                
            elif stream['codec_type'] == 'audio':
                codec = stream.get('codec_name', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
                sample_rate = stream.get('sample_rate', 0)
                channels = stream.get('channels', 0)
                print(f"   üéµ –ê—É–¥–∏–æ –∫–æ–¥–µ–∫: {codec}")
                print(f"   üéµ –ß–∞—Å—Ç–æ—Ç–∞: {sample_rate} –ì—Ü")
                print(f"   üéµ –ö–∞–Ω–∞–ª—ã: {channels}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
        return False

def compare_scaling_logic(original_width: int, original_height: int):
    """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print(f"\nüßÆ –õ–û–ì–ò–ö–ê –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Ø –¥–ª—è {original_width}x{original_height}")
    print("=" * 60)
    
    # –¶–µ–ª–µ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
    target_screen_width = 1080
    target_screen_height = 1920
    text_area_height = 520
    available_width = target_screen_width
    available_height = target_screen_height - text_area_height
    
    print(f"üéØ –¶–µ–ª–µ–≤–æ–π —ç–∫—Ä–∞–Ω: {target_screen_width}x{target_screen_height}")
    print(f"üìù –ú–µ—Å—Ç–æ –¥–ª—è —Ç–µ–∫—Å—Ç–∞: {text_area_height}px")
    print(f"üì∫ –î–æ—Å—Ç—É–ø–Ω–∞—è –æ–±–ª–∞—Å—Ç—å: {available_width}x{available_height}")
    
    # –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è —Å—Ç–æ—Ä–æ–Ω
    original_aspect = original_width / original_height
    available_aspect = available_width / available_height
    
    print(f"üìè –ò—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {original_aspect:.3f}")
    print(f"üìè –î–æ—Å—Ç—É–ø–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {available_aspect:.3f}")
    
    # –õ–æ–≥–∏–∫–∞ –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏—è
    if original_aspect > available_aspect:
        target_width = available_width
        target_height = int(available_width / original_aspect)
        scale_by = "—à–∏—Ä–∏–Ω–µ"
    else:
        target_height = available_height
        target_width = int(available_height * original_aspect)
        scale_by = "–≤—ã—Å–æ—Ç–µ"
    
    # –ö–æ—Ä—Ä–µ–∫—Ü–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤
    target_width = min(target_width, available_width)
    target_height = min(target_height, available_height)
    target_width = target_width - (target_width % 2)
    target_height = target_height - (target_height % 2)
    
    print(f"‚öñÔ∏è  –ú–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ: {scale_by}")
    print(f"üìê –†–µ–∑—É–ª—å—Ç–∞—Ç: {target_width}x{target_height}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã
    final_aspect = target_width / target_height
    print(f"üìè –ò—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ: {final_aspect:.3f}")
    
    if abs(final_aspect - original_aspect) > 0.01:
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –°–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω –∏–∑–º–µ–Ω–∏–ª–æ—Å—å!")
        print(f"   –ò–∑–º–µ–Ω–µ–Ω–∏–µ: {abs(final_aspect - original_aspect):.3f}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–º–µ—â–µ–Ω–∏—è
    y_position = (target_screen_height - target_height) / 2
    print(f"üìç –ü–æ–∑–∏—Ü–∏—è –ø–æ Y: {y_position:.0f}px")
    
    if y_position < text_area_height / 2:
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í–∏–¥–µ–æ –º–æ–∂–µ—Ç –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–≤–µ—Ä—Ö—É!")
    
    return target_width, target_height

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏"""
    print("üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –ü–†–û–ë–õ–ï–ú –ú–ê–°–®–¢–ê–ë–ò–†–û–í–ê–ù–ò–Ø")
    print("=" * 60)
    
    # –ò—â–µ–º –≤–∏–¥–µ–æ —Ñ–∞–π–ª—ã
    temp_dir = Path("temp")
    output_dir = Path("output")
    
    video_files = []
    for directory in [temp_dir, output_dir]:
        if directory.exists():
            video_files.extend(list(directory.glob("*.mp4")))
    
    if not video_files:
        print("‚ùå –ù–µ—Ç –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        return
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–æ–≤: {len(video_files)}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for i, video_file in enumerate(video_files[:3]):  # –ú–∞–∫—Å–∏–º—É–º 3 —Ñ–∞–π–ª–∞
        print(f"\n{'='*60}")
        print(f"–§–ê–ô–õ {i+1}: {video_file.name}")
        
        # –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑
        if analyze_video_detailed(str(video_file)):
            # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            editor = VideoEditor()
            try:
                info = editor.get_video_info(str(video_file))
                compare_scaling_logic(info['width'], info['height'])
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏: {e}")
    
    print(f"\n{'='*60}")
    print("üí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
    print("1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –µ—Å—Ç—å –ª–∏ –ø–æ–≤–æ—Ä–æ—Ç –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö YouTube –≤–∏–¥–µ–æ")
    print("2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ SAR (Sample Aspect Ratio) = 1:1")
    print("3. YouTube –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å —á–µ—Ä–Ω—ã–µ –ø–æ–ª–æ—Å—ã –∏–ª–∏ –æ–±—Ä–µ–∑–∞—Ç—å –≤–∏–¥–µ–æ")
    print("4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –Ω–µ –º–µ–Ω—è–µ—Ç—Å—è –ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏")

if __name__ == "__main__":
    asyncio.run(main())
import os
import asyncio
import logging
import ffmpeg
from pathlib import Path
from youtube_downloader import YouTubeDownloader
from video_editor import VideoEditor
from subtitle_generator import SubtitleGenerator
from google_drive_uploader import GoogleDriveUploader


logger = logging.getLogger(__name__)

class VideoProcessor:
    def __init__(self):
        self.youtube_downloader = YouTubeDownloader()
        self.video_editor = VideoEditor()
        self.subtitle_generator = SubtitleGenerator()
        self.drive_uploader = GoogleDriveUploader()
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞–±–æ—á–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        self.temp_dir = Path("temp")
        self.output_dir = Path("output")
        self.temp_dir.mkdir(exist_ok=True)
        self.output_dir.mkdir(exist_ok=True)
    
    async def process_youtube_video(self, url: str, config: dict) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ YouTube –≤–∏–¥–µ–æ"""
        try:
            # 1. –°–∫–∞—á–∏–≤–∞–µ–º –≤–∏–¥–µ–æ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç cookies –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
            logger.info(f"–°–∫–∞—á–∏–≤–∞–Ω–∏–µ YouTube –≤–∏–¥–µ–æ: {url}")
            download_result = await self.youtube_downloader.download_with_cookies(url)
            
            if not download_result['success']:
                return {'success': False, 'error': download_result['error']}
            
            video_path = download_result['video_path']
            
            # 2. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–∏–¥–µ–æ
            result = await self.process_video_file(video_path, config)
            
            # 3. –£–¥–∞–ª—è–µ–º —Å–∫–∞—á–∞–Ω–Ω–æ–µ –≤–∏–¥–µ–æ
            if os.path.exists(video_path):
                os.remove(video_path)
            
            return result
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ YouTube –≤–∏–¥–µ–æ: {e}")
            return {'success': False, 'error': str(e)}
    
    async def process_video_file(self, video_path: str, config: dict) -> dict:
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ —Ñ–∞–π–ª–∞"""
        try:
            duration = config.get('duration', 30)
            
            # 1. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∏–¥–µ–æ
            video_info = self.video_editor.get_video_info(video_path)
            total_duration = video_info['duration']
            
            logger.info(f"üéÆ –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–∏–¥–µ–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {total_duration} —Å–µ–∫—É–Ω–¥")
            
            # 2. –ï—Å–ª–∏ –≤–∏–¥–µ–æ –±–æ–ª—å—à–µ 5 –º–∏–Ω—É—Ç, –Ω–∞—Ä–µ–∑–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏
            chunks = []
            if total_duration > 300:  # 5 –º–∏–Ω—É—Ç
                logger.info(f"üî™ –í–∏–¥–µ–æ {total_duration:.1f} —Å–µ–∫ > 300 —Å–µ–∫, –Ω–∞—Ä–µ–∑–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏")
                chunks = await self.split_into_chunks(video_path, chunk_duration=300)
                logger.info(f"üì¶ –°–æ–∑–¥–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")
            else:
                logger.info(f"üìπ –í–∏–¥–µ–æ {total_duration:.1f} —Å–µ–∫ <= 300 —Å–µ–∫, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ü–µ–ª–∏–∫–æ–º")
                chunks = [video_path]
        
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–í–ï–†–ö–ê: —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –≤—Å–µ —á–∞–Ω–∫–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
            existing_chunks = []
            for i, chunk_path in enumerate(chunks):
                if os.path.exists(chunk_path):
                    chunk_info = self.video_editor.get_video_info(chunk_path)
                    existing_chunks.append(chunk_path)
                    logger.info(f"‚úÖ –ß–∞–Ω–∫ {i+1} —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {chunk_path} ({chunk_info['duration']:.1f} —Å–µ–∫)")
                else:
                    logger.error(f"‚ùå –ß–∞–Ω–∫ {i+1} –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢: {chunk_path}")
            
            logger.info(f"üìä –ò–¢–û–ì–û –≥–æ—Ç–æ–≤—ã—Ö —á–∞–Ω–∫–æ–≤: {len(existing_chunks)}/{len(chunks)}")
            chunks = existing_chunks
            
            # 3. –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–æ–≤ (–ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–ø–æ–≤ –≤–Ω—É—Ç—Ä–∏)
            logger.info(f"üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–£–Æ –æ–±—Ä–∞–±–æ—Ç–∫—É {len(chunks)} —á–∞–Ω–∫–æ–≤!")
            
            all_clips = []
            total_expected_clips = 0
            
            for i, chunk_path in enumerate(chunks):
                try:
                    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞–Ω–∫–µ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∫–ª–∏–ø–æ–≤
                    chunk_info = self.video_editor.get_video_info(chunk_path)
                    chunk_duration = chunk_info['duration']
                    expected_clips_in_chunk = int(chunk_duration // duration)
                    total_expected_clips += expected_clips_in_chunk
                    
                    logger.info(f"üìã –û–±—Ä–∞–±–æ—Ç–∫–∞ —á–∞–Ω–∫–∞ {i+1}/{len(chunks)}: {chunk_duration:.1f}—Å–µ–∫, –æ–∂–∏–¥–∞–µ—Ç—Å—è {expected_clips_in_chunk} –∫–ª–∏–ø–æ–≤")
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫ –∏ –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ –∫–ª–∏–ø—ã —Å–æ–∑–¥–∞—é—Ç—Å—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ)
                    clips_from_chunk = await self._process_chunk_parallel(
                        chunk_path, 
                        duration, 
                        config, 
                        i, 
                        len(chunks),
                        video_path
                    )
                    
                    if isinstance(clips_from_chunk, Exception):
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–∞ {i+1}: {clips_from_chunk}")
                    elif clips_from_chunk and isinstance(clips_from_chunk, list):
                        all_clips.extend(clips_from_chunk)
                        logger.info(f"‚úÖ –ß–∞–Ω–∫ {i+1} –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {len(clips_from_chunk)} –∫–ª–∏–ø–æ–≤")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ß–∞–Ω–∫ {i+1} –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç")

                except Exception as e:
                    logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–∞ {i+1}: {e}")
                    continue
            
            # –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
            logger.info(f"üèÅ –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê –û–ë–†–ê–ë–û–¢–ö–ò:")
            logger.info(f"   üìπ –ò—Å—Ö–æ–¥–Ω–æ–µ –≤–∏–¥–µ–æ: {total_duration:.1f} —Å–µ–∫")
            logger.info(f"   üì¶ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–∞–Ω–∫–æ–≤: {len(chunks)}")
            logger.info(f"   üéØ –û–∂–∏–¥–∞–ª–æ—Å—å –∫–ª–∏–ø–æ–≤: {total_expected_clips}")
            logger.info(f"   ‚úÖ –°–æ–∑–¥–∞–Ω–æ –∫–ª–∏–ø–æ–≤: {len(all_clips)}")
            logger.info(f"   üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: {len(all_clips)/total_expected_clips*100:.1f}%" if total_expected_clips > 0 else "   üìä –≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å: 0%")
            
            # 4. –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤
            import time
            logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–ø–∏—Å–∏ —Ñ–∞–π–ª–æ–≤...")
            time.sleep(3)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏
            
            # 5. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ –∫–ª–∏–ø—ã –Ω–∞ Google Drive
            logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ {len(all_clips)} –∫–ª–∏–ø–æ–≤ –Ω–∞ Google Drive")
            upload_results = await self.drive_uploader.upload_clips(all_clips)
            
            # 5. –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å–æ —Å—Å—ã–ª–∫–∞–º–∏
            links_file = await self.create_links_file(upload_results)
            
            # 6. –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¢–û–õ–¨–ö–û –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏
            successful_uploads = sum(1 for r in upload_results if r.get('success', False))
            if successful_uploads > 0:
                logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ {successful_uploads}/{len(all_clips)} –∫–ª–∏–ø–æ–≤, –æ—á–∏—â–∞–µ–º —Ñ–∞–π–ª—ã")
                # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                self.cleanup_successful_files(all_clips, upload_results)
            else:
                logger.warning("–ù–∏ –æ–¥–∏–Ω –∫–ª–∏–ø –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Ñ–∞–π–ª—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏")
            
            return {
                'success': True,
                'total_clips': len(all_clips),
                'links_file': links_file,
                'upload_results': upload_results
            }
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤–∏–¥–µ–æ: {e}")
            return {'success': False, 'error': str(e)}
    
    async def split_into_chunks(self, video_path: str, chunk_duration: int = 300) -> list:
        """–ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ë–´–°–¢–†–ê–Ø –Ω–∞—Ä–µ–∑–∫–∞ –≤–∏–¥–µ–æ –Ω–∞ —á–∞–Ω–∫–∏ (–∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ + –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ—Å—Ç—å)"""
        try:
            video_info = self.video_editor.get_video_info(video_path)
            total_duration = int(video_info['duration'])
            
            # –ï—Å–ª–∏ –≤–∏–¥–µ–æ –∫–æ—Ä–æ—Ç–∫–æ–µ - –Ω–µ –¥–µ–ª–∏–º –Ω–∞ —á–∞—Å—Ç–∏ (–∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ)
            if total_duration <= chunk_duration:
                logger.info(f"–í–∏–¥–µ–æ {total_duration} —Å–µ–∫ <= {chunk_duration} —Å–µ–∫, –Ω–µ –¥–µ–ª–∏–º –Ω–∞ —á–∞–Ω–∫–∏")
                return [video_path]
            
            # –í—ã—á–∏—Å–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å—Ç–µ–π (–∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ)
            import math
            num_chunks = math.ceil(total_duration / chunk_duration)
            logger.info(f"–î–µ–ª–∏–º –≤–∏–¥–µ–æ {total_duration} —Å–µ–∫ –Ω–∞ {num_chunks} —á–∞–Ω–∫–æ–≤ –ø–æ {chunk_duration} —Å–µ–∫")
            
            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
            chunk_tasks = []
            chunk_paths = []
            
            for i in range(num_chunks):
                start_time = i * chunk_duration
                actual_duration = min(chunk_duration, total_duration - start_time)
                chunk_path = self.temp_dir / f"chunk_{i}.mp4"
                
                chunk_tasks.append({
                    'input_path': video_path,
                    'output_path': str(chunk_path),
                    'start_time': start_time,
                    'duration': actual_duration,
                    'index': i
                })
                chunk_paths.append(str(chunk_path))
            
            logger.info(f"–ù–∞—á–∏–Ω–∞–µ–º –°–£–ü–ï–† –ë–´–°–¢–†–£–Æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—É—é –Ω–∞—Ä–µ–∑–∫—É {len(chunk_tasks)} —á–∞–Ω–∫–æ–≤...")
            
            # –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û —Å–æ–∑–¥–∞–µ–º –≤—Å–µ —á–∞–Ω–∫–∏ —Å –ø—Ä—è–º—ã–º–∏ –∫–æ–º–∞–Ω–¥–∞–º–∏ ffmpeg
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è GPU (–±–æ–ª—å—à–µ VRAM = –±–æ–ª—å—à–µ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞)
            gpu_available = self._check_gpu_support()
            if gpu_available:
                max_concurrent = min(6, len(chunk_tasks))  # –ú–∞–∫—Å–∏–º—É–º 6 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –¥–ª—è GPU
                logger.info(f"üöÄ GPU —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º {max_concurrent} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
            else:
                max_concurrent = min(3, len(chunk_tasks))  # –ú–∞–∫—Å–∏–º—É–º 3 –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–ª—è CPU
                logger.info(f"üíª CPU —Ä–µ–∂–∏–º: –∏—Å–ø–æ–ª—å–∑—É–µ–º {max_concurrent} –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
            
            if len(chunk_tasks) <= max_concurrent:
                # –ï—Å–ª–∏ —á–∞–Ω–∫–æ–≤ –º–∞–ª–æ, —Å–æ–∑–¥–∞–µ–º –≤—Å–µ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
                tasks = [
                    self._create_chunk_ultra_fast(task) 
                    for task in chunk_tasks
                ]
                results = await asyncio.gather(*tasks, return_exceptions=True)
            else:
                # –ï—Å–ª–∏ —á–∞–Ω–∫–æ–≤ –º–Ω–æ–≥–æ, —Å–æ–∑–¥–∞–µ–º –±–∞—Ç—á–∞–º–∏
                logger.info(f"–°–æ–∑–¥–∞–µ–º {len(chunk_tasks)} —á–∞–Ω–∫–æ–≤ –±–∞—Ç—á–∞–º–∏ –ø–æ {max_concurrent}")
                results = []
                for i in range(0, len(chunk_tasks), max_concurrent):
                    batch = chunk_tasks[i:i + max_concurrent]
                    batch_tasks = [self._create_chunk_ultra_fast(task) for task in batch]
                    batch_results = await asyncio.gather(*batch_tasks, return_exceptions=True)
                    results.extend(batch_results)
                    logger.info(f"–ó–∞–≤–µ—Ä—à–µ–Ω –±–∞—Ç—á {i//max_concurrent + 1}/{(len(chunk_tasks)-1)//max_concurrent + 1}")
            

            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            successful_chunks = []
            for i, result in enumerate(results):
                if isinstance(result, Exception):
                    logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–∞ {i}: {result}")
                elif result:
                    successful_chunks.append(chunk_paths[i])
                    logger.info(f"‚úÖ –ß–∞–Ω–∫ {i+1}/{num_chunks} –≥–æ—Ç–æ–≤: {chunk_tasks[i]['duration']} —Å–µ–∫")
                else:
                    logger.warning(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —á–∞–Ω–∫ {i}")
            
            logger.info(f"üöÄ –°–£–ü–ï–† –ë–´–°–¢–†–û —Å–æ–∑–¥–∞–Ω–æ {len(successful_chunks)}/{num_chunks} —á–∞–Ω–∫–æ–≤")
            
            # –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê: –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —á–∞–Ω–∫
            logger.info(f"üîç –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–û–ó–î–ê–ù–ù–´–• –ß–ê–ù–ö–û–í:")
            total_chunks_duration = 0
            for i, chunk_path in enumerate(successful_chunks):
                try:
                    if os.path.exists(chunk_path):
                        chunk_info = self.video_editor.get_video_info(chunk_path)
                        chunk_duration = chunk_info['duration']
                        total_chunks_duration += chunk_duration
                        logger.info(f"   ‚úÖ –ß–∞–Ω–∫ {i+1}: {chunk_duration:.1f} —Å–µ–∫ - {chunk_path}")
                    else:
                        logger.error(f"   ‚ùå –ß–∞–Ω–∫ {i+1}: –§–ê–ô–õ –ù–ï –°–£–©–ï–°–¢–í–£–ï–¢ - {chunk_path}")
                except Exception as e:
                    logger.error(f"   ‚ùå –ß–∞–Ω–∫ {i+1}: –û–®–ò–ë–ö–ê –ß–¢–ï–ù–ò–Ø - {e}")
            
            logger.info(f"üìä –ò–¢–û–ì–û –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —á–∞–Ω–∫–æ–≤: {total_chunks_duration:.1f} —Å–µ–∫ –∏–∑ {total_duration:.1f} —Å–µ–∫")
            coverage = (total_chunks_duration / total_duration) * 100 if total_duration > 0 else 0
            logger.info(f"üìà –ü–æ–∫—Ä—ã—Ç–∏–µ –≤–∏–¥–µ–æ —á–∞–Ω–∫–∞–º–∏: {coverage:.1f}%")
            
            if coverage < 95:
                logger.warning(f"‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –ß–∞–Ω–∫–∏ –ø–æ–∫—Ä—ã–≤–∞—é—Ç —Ç–æ–ª—å–∫–æ {coverage:.1f}% –∏—Å—Ö–æ–¥–Ω–æ–≥–æ –≤–∏–¥–µ–æ!")
            
            return successful_chunks
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—É–ø–µ—Ä –±—ã—Å—Ç—Ä–æ–π –Ω–∞—Ä–µ–∑–∫–∏ –Ω–∞ —á–∞–Ω–∫–∏: {e}")
            return [video_path]  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
    
    async def _create_chunk_ultra_fast(self, task: dict) -> bool:
        """–°–£–ü–ï–† –ë–´–°–¢–†–û–ï —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–∞ —Å —Ç–∞–π–º–∞—É—Ç–æ–º –∏ fallback"""
        try:
            logger.info(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–∞ {task['index']}: {task['start_time']}-{task['start_time'] + task['duration']} —Å–µ–∫")
            
            loop = asyncio.get_event_loop()
            
            # –£–º–µ–Ω—å—à–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–æ 30 —Å–µ–∫—É–Ω–¥ –¥–ª—è –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
            await asyncio.wait_for(
                loop.run_in_executor(
                    None,
                    self._create_chunk_direct_command,
                    task['input_path'],
                    task['output_path'], 
                    task['start_time'],
                    task['duration']
                ),
                timeout=30.0  # 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç –¥–ª—è –ø–µ—Ä–≤–æ–π –ø–æ–ø—ã—Ç–∫–∏
            )
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–∑–¥–∞–ª—Å—è
            if os.path.exists(task['output_path']):
                file_size = os.path.getsize(task['output_path'])
                logger.info(f"‚úÖ –ß–∞–Ω–∫ {task['index']} —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ: {file_size} –±–∞–π—Ç")
                return True
            else:
                logger.error(f"‚ùå –ß–∞–Ω–∫ {task['index']} –ù–ï –°–û–ó–î–ê–õ–°–Ø: —Ñ–∞–π–ª –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç")
                return False
            
        except asyncio.TimeoutError:
            logger.warning(f"‚è∞ –¢–∞–π–º–∞—É—Ç —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–∞ {task['index']}, –ø—Ä–æ–±—É–µ–º CPU fallback")
            # –ü—Ä–æ–±—É–µ–º CPU fallback
            try:
                loop = asyncio.get_event_loop()
                await asyncio.wait_for(
                    loop.run_in_executor(
                        None,
                        self._create_chunk_cpu_fallback,
                        task['input_path'],
                        task['output_path'], 
                        task['start_time'],
                        task['duration']
                    ),
                    timeout=120.0  # 2 –º–∏–Ω—É—Ç—ã –¥–ª—è CPU
                )
                logger.info(f"‚úÖ –ß–∞–Ω–∫ {task['index']} —Å–æ–∑–¥–∞–Ω —á–µ—Ä–µ–∑ CPU fallback")
                return True
            except Exception as fallback_error:
                logger.error(f"‚ùå CPU fallback —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª –¥–ª—è —á–∞–Ω–∫–∞ {task['index']}: {fallback_error}")
                return False
                
        except Exception as e:
            logger.error(f"‚ùå –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–∞ {task['index']}: {e}")
            logger.error(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —á–∞–Ω–∫–∞: start={task['start_time']}, duration={task['duration']}, output={task['output_path']}")
            return False
    
    def _create_chunk_direct_command(self, input_path: str, output_path: str, start_time: int, duration: int):
        """–ü—Ä—è–º–∞—è –∫–æ–º–∞–Ω–¥–∞ ffmpeg —Å –ü–û–õ–ù–´–ú GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ–º –¥–ª—è –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏"""
        import subprocess
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å GPU –∏ —Ç–∏–ø –≤–∏–¥–µ–æ
        gpu_available = self._check_gpu_support()
        video_codec = self._get_video_codec(input_path)
        
        # –î–ª—è AV1 –≤–∏–¥–µ–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
        if video_codec == 'av1':
            logger.info(f"üé¨ –û–±–Ω–∞—Ä—É–∂–µ–Ω AV1 –∫–æ–¥–µ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º GPU –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ + –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ")
            logger.info(f"   üìä –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —á–∞–Ω–∫–∞: start={start_time}s, duration={duration}s")
            return self._create_chunk_av1_gpu_optimized(input_path, output_path, start_time, duration)
        
        if gpu_available:
            # –ü–û–õ–ù–û–ï GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ: –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ + –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ + –º–∞—Å—à—Ç–∞–±–∏—Ä–æ–≤–∞–Ω–∏–µ
            cmd = [
                'ffmpeg',
                '-hwaccel', 'cuda',           # GPU –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
                '-hwaccel_output_format', 'cuda',  # –î–µ—Ä–∂–∏–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ GPU
                '-ss', str(start_time),       # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ (–ü–ï–†–ï–î –≤—Ö–æ–¥–Ω—ã–º —Ñ–∞–π–ª–æ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞)
                '-i', input_path,             # –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
                '-t', str(duration),          # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                '-c:v', 'h264_nvenc',         # GPU –∫–æ–¥–∏—Ä–æ–≤—â–∏–∫ NVIDIA
                '-c:a', 'copy',               # –ö–æ–ø–∏—Ä—É–µ–º –∞—É–¥–∏–æ –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è (–±—ã—Å—Ç—Ä–µ–µ)
                '-preset', 'p4',              # NVENC –ø—Ä–µ—Å–µ—Ç (p1-p7, p4 = medium)
                '-rc', 'vbr',                 # Variable bitrate –¥–ª—è NVENC
                '-cq', '23',                  # –ö–∞—á–µ—Å—Ç–≤–æ –¥–ª—è NVENC
                '-profile:v', 'main',         # –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å (–±–æ–ª–µ–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π)
                '-level', '4.0',              # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è Full HD
                '-pix_fmt', 'yuv420p',        # –§–æ—Ä–º–∞—Ç –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                '-gpu', '0',                  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–π GPU
                '-avoid_negative_ts', 'make_zero',
                '-y',                         # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
                output_path
            ]
            logger.info(f"üöÄ –ü–û–õ–ù–û–ï GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ: –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ + –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ ({video_codec} -> h264)")
        else:
            # –û–±—ã—á–Ω–∞—è CPU –∫–æ–º–∞–Ω–¥–∞ (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
            cmd = [
                'ffmpeg',
                '-ss', str(start_time),        # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                '-i', input_path,              # –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
                '-t', str(duration),           # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                '-c', 'copy',                  # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                '-avoid_negative_ts', 'make_zero',
                '-y',                          # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
                output_path
            ]
            logger.info(f"üíª –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU –¥–ª—è –Ω–∞—Ä–µ–∑–∫–∏ —á–∞–Ω–∫–∞ ({video_codec})")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–º–∞–Ω–¥—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π –¥–ª—è Windows
        result = subprocess.run(
            cmd, 
            capture_output=True, 
            text=True,
            encoding='utf-8',  # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º UTF-8
            errors='ignore',   # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∏
            check=False        # –ù–µ –±—Ä–æ—Å–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        )
        
        if result.returncode != 0:
            logger.error(f"–û—à–∏–±–∫–∞ ffmpeg: {result.stderr}")
            # –ï—Å–ª–∏ GPU –∫–æ–º–∞–Ω–¥–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –ø—Ä–æ–±—É–µ–º CPU
            if gpu_available:
                logger.warning("–ü–û–õ–ù–û–ï GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º CPU...")
                return self._create_chunk_cpu_fallback(input_path, output_path, start_time, duration)
            else:
                raise Exception(f"ffmpeg –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {result.returncode}")
    
    def _get_video_codec(self, input_path: str) -> str:
        """–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–¥–µ–∫–∞ –≤–∏–¥–µ–æ"""
        try:
            probe = ffmpeg.probe(input_path)
            video_stream = next((stream for stream in probe['streams'] if stream['codec_type'] == 'video'), None)
            if video_stream:
                codec = video_stream.get('codec_name', 'unknown')
                logger.info(f"üé¨ –û–±–Ω–∞—Ä—É–∂–µ–Ω –≤–∏–¥–µ–æ –∫–æ–¥–µ–∫: {codec}")
                return codec
            return 'unknown'
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∫–æ–¥–µ–∫–∞: {e}")
            return 'unknown'
    
    def _create_chunk_av1_optimized(self, input_path: str, output_path: str, start_time: int, duration: int):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ AV1 –≤–∏–¥–µ–æ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        import subprocess
        
        logger.info(f"üé¨ –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ AV1 –≤–∏–¥–µ–æ (–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø)")
        
        # –î–ª—è AV1 –≤–∏–¥–µ–æ –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å stream copy –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        # –≠—Ç–æ –Ω–∞–º–Ω–æ–≥–æ –±—ã—Å—Ç—Ä–µ–µ –∏ –∏–∑–±–µ–≥–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º —Å GPU –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ–º AV1
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –ø—Ä–æ—Å—Ç–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
        cmd_copy = [
            'ffmpeg',
            '-ss', str(start_time),       # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
            '-i', input_path,             # –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            '-t', str(duration),          # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            '-c', 'copy',                 # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ –ø–æ—Ç–æ–∫–∏ –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
            '-avoid_negative_ts', 'make_zero',
            '-y',                         # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
            output_path
        ]
        
        logger.info(f"üöÄ –ü—Ä–æ–±—É–µ–º –±—ã—Å—Ç—Ä–æ–µ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ AV1 –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
        
        result = subprocess.run(
            cmd_copy, 
            capture_output=True, 
            text=True, 
            encoding='utf-8',
            errors='ignore',
            timeout=30,  # –ö–æ—Ä–æ—Ç–∫–∏–π —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
            check=False
        )
        
        if result.returncode == 0:
            logger.info(f"‚úÖ AV1 –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –ï—Å–ª–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º CPU –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
        logger.warning(f"–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–æ, –ø—Ä–æ–±—É–µ–º CPU –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        logger.warning(f"–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {result.stderr[:200]}...")
        
        # CPU –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –¥–ª—è AV1
        cmd_cpu = [
            'ffmpeg',
            '-ss', str(start_time),       # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
            '-i', input_path,             # –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            '-t', str(duration),          # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            '-c:v', 'libx264',            # CPU –∫–æ–¥–∏—Ä–æ–≤—â–∏–∫
            '-c:a', 'copy',               # –ö–æ–ø–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            '-preset', 'ultrafast',       # –°–∞–º—ã–π –±—ã—Å—Ç—Ä—ã–π –ø—Ä–µ—Å–µ—Ç –¥–ª—è AV1
            '-crf', '28',                 # –ë–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–µ —Å–∂–∞—Ç–∏–µ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            '-profile:v', 'baseline',     # –ë–∞–∑–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            '-level', '3.1',              # –ë–æ–ª–µ–µ –Ω–∏–∑–∫–∏–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
            '-pix_fmt', 'yuv420p',        # –§–æ—Ä–º–∞—Ç –ø–∏–∫—Å–µ–ª–µ–π
            '-threads', '4',              # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫–∏ –¥–ª—è —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏
            '-avoid_negative_ts', 'make_zero',
            '-y',                         # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
            output_path
        ]
        
        logger.info(f"üíª –ò—Å–ø–æ–ª—å–∑—É–µ–º –±—ã—Å—Ç—Ä–æ–µ CPU –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ AV1 -> H.264")
        
        result = subprocess.run(
            cmd_cpu, 
            capture_output=True, 
            text=True, 
            encoding='utf-8',
            errors='ignore',
            timeout=90,  # 90 —Å–µ–∫—É–Ω–¥ –¥–ª—è CPU –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
            check=False
        )
        
        if result.returncode != 0:
            logger.error(f"–û—à–∏–±–∫–∞ CPU –æ–±—Ä–∞–±–æ—Ç–∫–∏ AV1: {result.stderr[:300]}...")
            raise Exception(f"AV1 CPU –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –∫–æ–¥–æ–º {result.returncode}")
        
        logger.info(f"‚úÖ AV1 –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–µ—Ä–µ–∑ CPU (AV1 -> H.264)")
    
    def _create_chunk_av1_gpu_optimized(self, input_path: str, output_path: str, start_time: int, duration: int):
        """GPU –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ AV1 –≤–∏–¥–µ–æ"""
        import subprocess
        
        logger.info(f"üöÄ GPU –æ–±—Ä–∞–±–æ—Ç–∫–∞ AV1 –≤–∏–¥–µ–æ")
        
        # –ü—Ä–æ–±—É–µ–º GPU –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ AV1 + GPU –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ H.264
        cmd_gpu = [
            'ffmpeg',
            '-hwaccel', 'cuda',           # GPU –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            '-hwaccel_output_format', 'cuda',  # –î–µ—Ä–∂–∏–º –¥–∞–Ω–Ω—ã–µ –Ω–∞ GPU
            '-ss', str(start_time),       # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
            '-i', input_path,             # –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            '-t', str(duration),          # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            '-c:v', 'h264_nvenc',         # GPU –∫–æ–¥–∏—Ä–æ–≤—â–∏–∫ NVIDIA
            '-c:a', 'copy',               # –ö–æ–ø–∏—Ä—É–µ–º –∞—É–¥–∏–æ
            '-preset', 'p2',              # –ë—ã—Å—Ç—Ä—ã–π NVENC –ø—Ä–µ—Å–µ—Ç –¥–ª—è AV1
            '-rc', 'vbr',                 # Variable bitrate
            '-cq', '25',                  # –ù–µ–º–Ω–æ–≥–æ –≤—ã—à–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è AV1
            '-profile:v', 'main',         # –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å
            '-level', '4.0',              # –£—Ä–æ–≤–µ–Ω—å
            '-pix_fmt', 'yuv420p',        # –§–æ—Ä–º–∞—Ç –ø–∏–∫—Å–µ–ª–µ–π
            '-gpu', '0',                  # –ü–µ—Ä–≤—ã–π GPU
            '-avoid_negative_ts', 'make_zero',
            '-y',                         # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
            output_path
        ]
        
        logger.info(f"üéÆ –ü—Ä–æ–±—É–µ–º –ü–û–õ–ù–û–ï GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ –¥–ª—è AV1 (–¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ + –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ)")
        
        result = subprocess.run(
            cmd_gpu, 
            capture_output=True, 
            text=True, 
            encoding='utf-8',
            errors='ignore',
            timeout=60,  # 60 —Å–µ–∫—É–Ω–¥ –¥–ª—è GPU AV1
            check=False
        )
        
        if result.returncode == 0:
            logger.info(f"‚úÖ AV1 –≤–∏–¥–µ–æ —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ —á–µ—Ä–µ–∑ –ü–û–õ–ù–û–ï GPU —É—Å–∫–æ—Ä–µ–Ω–∏–µ")
            return
        
        # –ï—Å–ª–∏ GPU –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, fallback –Ω–∞ –æ–±—ã—á–Ω—É—é AV1 –æ–±—Ä–∞–±–æ—Ç–∫—É
        logger.warning(f"GPU AV1 –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º CPU fallback...")
        logger.warning(f"–û—à–∏–±–∫–∞ GPU: {result.stderr[:200]}...")
        
        return self._create_chunk_av1_optimized(input_path, output_path, start_time, duration)

    def _check_gpu_support(self) -> bool:
        """–î–µ—Ç–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ GPU –¥–ª—è ffmpeg"""
        try:
            import subprocess
            
            logger.info("üîç –î–ï–¢–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê GPU –ü–û–î–î–ï–†–ñ–ö–ò:")
            
            # 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ NVIDIA GPU
            logger.info("   1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º nvidia-smi...")
            result = subprocess.run(
                ['nvidia-smi'], 
                capture_output=True, 
                text=True, 
                encoding='utf-8',
                errors='ignore',
                check=False
            )
            if result.returncode != 0:
                logger.warning("   ‚ùå nvidia-smi –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                return False
            else:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ GPU
                gpu_info = result.stdout
                if "Tesla T4" in gpu_info:
                    logger.info("   ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω Tesla T4 GPU")
                elif "GeForce" in gpu_info:
                    logger.info("   ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω GeForce GPU")
                else:
                    logger.info("   ‚úÖ –û–±–Ω–∞—Ä—É–∂–µ–Ω NVIDIA GPU")
            
            # 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É NVENC –≤ ffmpeg
            logger.info("   2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É NVENC –≤ ffmpeg...")
            result = subprocess.run(
                ['ffmpeg', '-encoders'], 
                capture_output=True, 
                text=True,
                encoding='utf-8',
                errors='ignore',
                check=False
            )
            if 'h264_nvenc' not in result.stdout:
                logger.warning("   ‚ùå h264_nvenc –∫–æ–¥–∏—Ä–æ–≤—â–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ ffmpeg")
                return False
            else:
                logger.info("   ‚úÖ h264_nvenc –∫–æ–¥–∏—Ä–æ–≤—â–∏–∫ –¥–æ—Å—Ç—É–ø–µ–Ω")
            
            # 3. –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ (–±—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç)
            logger.info("   3Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Ä–µ–∞–ª—å–Ω–æ–µ GPU –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ...")
            test_result = self._test_gpu_encoding()
            if test_result:
                logger.info("   ‚úÖ GPU –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!")
                logger.info("üéÆ –ò–¢–û–ì: GPU –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ü–û–õ–ù–û–°–¢–¨–Æ –î–û–°–¢–£–ü–ù–ê")
                return True
            else:
                logger.warning("   ‚ùå GPU –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
                logger.warning("üíª –ò–¢–û–ì: –ò—Å–ø–æ–ª—å–∑—É–µ–º CPU fallback")
                return False
                
        except Exception as e:
            logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ GPU: {e}")
            return False
    
    def _test_gpu_encoding(self) -> bool:
        """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç GPU –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            import subprocess
            import tempfile
            import os
            
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –≤–∏–¥–µ–æ 1 —Å–µ–∫—É–Ω–¥–∞
            with tempfile.NamedTemporaryFile(suffix='.mp4', delete=False) as temp_file:
                temp_output = temp_file.name
            
            try:
                # –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ GPU –∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
                cmd = [
                    'ffmpeg',
                    '-f', 'lavfi',
                    '-i', 'testsrc=duration=1:size=320x240:rate=30',
                    '-c:v', 'h264_nvenc',
                    '-preset', 'fast',
                    '-cq', '23',
                    '-profile:v', 'main',
                    '-level', '4.0',
                    '-pix_fmt', 'yuv420p',
                    '-y',
                    temp_output
                ]
                
                result = subprocess.run(
                    cmd,
                    capture_output=True,
                    text=True,
                    encoding='utf-8',
                    errors='ignore',
                    timeout=10,  # 10 —Å–µ–∫—É–Ω–¥ –º–∞–∫—Å–∏–º—É–º
                    check=False
                )
                
                success = result.returncode == 0 and os.path.exists(temp_output)
                if not success and result.stderr:
                    logger.warning(f"   GPU —Ç–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª: {result.stderr[:200]}...")
                
                return success
                
            finally:
                # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª
                if os.path.exists(temp_output):
                    os.unlink(temp_output)
                    
        except Exception as e:
            logger.warning(f"   –û—à–∏–±–∫–∞ GPU —Ç–µ—Å—Ç–∞: {e}")
            return False
    
    def _create_chunk_cpu_fallback(self, input_path: str, output_path: str, start_time: int, duration: int):
        """–†–µ–∑–µ—Ä–≤–Ω–∞—è CPU –∫–æ–º–∞–Ω–¥–∞ –µ—Å–ª–∏ GPU –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        import subprocess
        
        # CPU –∫–æ–º–∞–Ω–¥–∞ —Å —Ä–∞–∑—É–º–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        cmd = [
            'ffmpeg',
            '-ss', str(start_time),       # –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
            '-i', input_path,             # –í—Ö–æ–¥–Ω–æ–π —Ñ–∞–π–ª
            '-t', str(duration),          # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            '-c:v', 'libx264',            # CPU –∫–æ–¥–∏—Ä–æ–≤—â–∏–∫ x264
            '-c:a', 'copy',               # –ö–æ–ø–∏—Ä—É–µ–º –∞—É–¥–∏–æ –±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è
            '-preset', 'fast',            # –ë—ã—Å—Ç—Ä—ã–π –ø—Ä–µ—Å–µ—Ç –¥–ª—è –Ω–∞—Ä–µ–∑–∫–∏
            '-crf', '23',                 # –†–∞–∑—É–º–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –¥–ª—è –Ω–∞—Ä–µ–∑–∫–∏
            '-profile:v', 'main',         # –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ñ–∏–ª—å (–±–æ–ª–µ–µ —Å–æ–≤–º–µ—Å—Ç–∏–º—ã–π)
            '-level', '4.0',              # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –¥–ª—è Full HD
            '-pix_fmt', 'yuv420p',        # –§–æ—Ä–º–∞—Ç –ø–∏–∫—Å–µ–ª–µ–π –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            '-avoid_negative_ts', 'make_zero',
            '-y',                         # –ü–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –±–µ–∑ –≤–æ–ø—Ä–æ—Å–æ–≤
            output_path
        ]
        
        result = subprocess.run(
            cmd, 
            capture_output=True, 
            text=True, 
            encoding='utf-8',
            errors='ignore',
            check=False
        )
        
        if result.returncode != 0:
            logger.error(f"–û—à–∏–±–∫–∞ CPU fallback: {result.stderr}")
            raise Exception(f"CPU fallback –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º {result.returncode}")
    
    async def _create_chunk_fast(self, task: dict) -> bool:
        """–ë—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞ (—Å—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ —á–µ—Ä–µ–∑ python-ffmpeg)"""
        try:
            loop = asyncio.get_event_loop()
            await loop.run_in_executor(
                None,
                self._create_chunk_sync_fast,
                task['input_path'],
                task['output_path'], 
                task['start_time'],
                task['duration']
            )
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —á–∞–Ω–∫–∞ {task['index']}: {e}")
            return False

    async def process_chunk_logic(self, chunk_path: str, duration: int, config: dict, start_index: int) -> list:
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—É–±—Ç–∏—Ç—Ä–æ–≤ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∏–ø–æ–≤."""
        try:
            # 1. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è —á–∞–Ω–∫–∞
            logger.info(f"   üé§ –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è {chunk_path}...")
            subtitles = await self.subtitle_generator.generate(chunk_path)
            logger.info(f"   ‚úÖ –°—É–±—Ç–∏—Ç—Ä—ã –¥–ª—è {chunk_path} –≥–æ—Ç–æ–≤—ã: {len(subtitles)} —Ñ—Ä–∞–∑")

            # 2. –ù–∞—Ä–µ–∑–∞–µ–º —á–∞–Ω–∫ –Ω–∞ –∫–ª–∏–ø—ã
            logger.info(f"   ‚úÇÔ∏è  –ù–∞—Ä–µ–∑–∞–µ–º –Ω–∞ –∫–ª–∏–ø—ã –∏–∑ {chunk_path}...")
            clips = await self.video_editor.create_clips_parallel(
                chunk_path,
                duration,
                subtitles,
                start_index=start_index,
                config=config,
                max_parallel=10  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ GPU
            )
            logger.info(f"   üéâ –ò–∑ {chunk_path} —Å–æ–∑–¥–∞–Ω–æ {len(clips)} –∫–ª–∏–ø–æ–≤")
            return clips
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ process_chunk_logic –¥–ª—è {chunk_path}: {e}")
            return []

    async def _process_chunk_parallel(self, chunk_path: str, duration: int, config: dict,
                                     chunk_index: int, total_chunks: int, original_video_path: str) -> list:
        """–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ–¥–Ω–æ–≥–æ —á–∞–Ω–∫–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–∏."""
        try:
            logger.info(f"üé¨ –ü–ê–†–ê–õ–õ–ï–õ–¨–ù–û –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–∞–Ω–∫ {chunk_index+1}/{total_chunks}: {chunk_path}")

            # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è —ç—Ç–æ–≥–æ —á–∞–Ω–∫–∞
            start_index = chunk_index * int(300 // duration)

            # –í—ã–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –ª–æ–≥–∏–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
            clips = await self.process_chunk_logic(chunk_path, duration, config, start_index)

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞–Ω–∫ (–µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª)
            if chunk_path != original_video_path and os.path.exists(chunk_path):
                os.remove(chunk_path)
                logger.info(f"   üóëÔ∏è  –£–¥–∞–ª–µ–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π —á–∞–Ω–∫: {chunk_path}")

            return clips

        except Exception as e:
            logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ —á–∞–Ω–∫–∞ {chunk_index+1}: {e}")
            return []

    
    def _create_chunk_sync_fast(self, input_path: str, output_path: str, start_time: float, duration: float):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –±—ã—Å—Ç—Ä–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —á–∞–Ω–∫–∞ —Å –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        # –ú–ê–ö–°–ò–ú–ê–õ–¨–ù–û –ë–´–°–¢–†–ê–Ø –Ω–∞—Ä–µ–∑–∫–∞ —Å stream copy
        (
            ffmpeg
            .input(input_path, 
                   ss=start_time,           # –¢–æ—á–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞
                   t=duration,              # –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
                   copyts=True)             # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–∫–∏
            .output(output_path, 
                   vcodec='copy',           # –ö–æ–ø–∏—Ä—É–µ–º –≤–∏–¥–µ–æ (–±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è)
                   acodec='copy',           # –ö–æ–ø–∏—Ä—É–µ–º –∞—É–¥–∏–æ (–±–µ–∑ –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è)
                   avoid_negative_ts='make_zero',  # –ò–∑–±–µ–≥–∞–µ–º –ø—Ä–æ–±–ª–µ–º —Å —Ç–∞–π–º–∏–Ω–≥–æ–º
                   map_metadata=0,          # –ö–æ–ø–∏—Ä—É–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
                   movflags='faststart')    # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Å—Ç–∞—Ä—Ç–∞
            .overwrite_output()
            .run(quiet=True, capture_stdout=True, capture_stderr=True)
        )
    
    async def create_links_file(self, upload_results: list) -> str:
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å–æ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ"""
        try:
            links_file = self.output_dir / "video_links.txt"
            
            with open(links_file, 'w', encoding='utf-8') as f:
                f.write("üé¨ –°–°–´–õ–ö–ò –ù–ê –°–ö–ê–ß–ò–í–ê–ù–ò–ï –®–û–¢–°–û–í\n")
                f.write("=" * 50 + "\n\n")
                
                for i, result in enumerate(upload_results, 1):
                    if result['success']:
                        f.write(f"–§—Ä–∞–≥–º–µ–Ω—Ç {i:03d}: {result['download_url']}\n")
                
                f.write(f"\nüìä –í—Å–µ–≥–æ —Å–æ–∑–¥–∞–Ω–æ: {len(upload_results)} —à–æ—Ç—Å–æ–≤\n")
                f.write(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {sum(1 for r in upload_results if r['success'])}\n")
            
            return str(links_file)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ñ–∞–π–ª–∞ —Å—Å—ã–ª–æ–∫: {e}")
            return None
    
    def cleanup_successful_files(self, clip_paths: list, upload_results: list):
        """–û—á–∏—Å—Ç–∫–∞ —Ç–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        try:
            import time
            import gc
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
            gc.collect()
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∞–π–ª–∞–º–∏
            time.sleep(2)  # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
            
            # –£–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
            for i, clip_path in enumerate(clip_paths):
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ —ç—Ç–æ—Ç –∫–ª–∏–ø —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω
                    if i < len(upload_results) and upload_results[i].get('success', False):
                        if os.path.exists(clip_path):
                            # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
                            for attempt in range(5):  # –ë–æ–ª—å—à–µ –ø–æ–ø—ã—Ç–æ–∫
                                try:
                                    os.remove(clip_path)
                                    logger.info(f"–£–¥–∞–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª: {clip_path}")
                                    break
                                except PermissionError:
                                    if attempt < 4:
                                        time.sleep(1)  # –ë–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏
                                        continue
                                    else:
                                        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {clip_path} - —Ñ–∞–π–ª –∑–∞–Ω—è—Ç, –æ—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è")
                    else:
                        logger.info(f"–§–∞–π–ª {clip_path} –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏")
                        
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {clip_path}: {e}")
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –æ—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            for file in self.temp_dir.glob("*"):
                try:
                    if file.is_file() and not file.name.startswith('clip_'):
                        file.unlink()
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {file}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")

    def cleanup_temp_files(self, clip_paths: list):
        """–û—á–∏—Å—Ç–∫–∞ –≤—Å–µ—Ö –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö)"""
        try:
            import time
            import gc
            
            # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ –¥–ª—è –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤—ã—Ö –¥–µ—Å–∫—Ä–∏–ø—Ç–æ—Ä–æ–≤
            gc.collect()
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π —Å —Ñ–∞–π–ª–∞–º–∏
            time.sleep(1)
            
            for clip_path in clip_paths:
                try:
                    if os.path.exists(clip_path):
                        # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–∑
                        for attempt in range(3):
                            try:
                                os.remove(clip_path)
                                break
                            except PermissionError:
                                if attempt < 2:
                                    time.sleep(0.5)
                                    continue
                                else:
                                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª {clip_path} - —Ñ–∞–π–ª –∑–∞–Ω—è—Ç")
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {clip_path}: {e}")
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
            for file in self.temp_dir.glob("*"):
                try:
                    if file.is_file():
                        file.unlink()
                except Exception as e:
                    logger.warning(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {file}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤: {e}")